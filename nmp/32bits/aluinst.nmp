//operations

op aluinst = arithmetique|logique|bits | pack_unpack | cls | cls_h | clz | clz_h | clo | clo_h | madd | flt | parity | sat | ixmax | ixmax_u | ixmin | ixmin_u 

op arithmetique = absdif|abs|add|div|mov|mul|sel|sub

op logique = and|eq|ge|ne|or|xor|lt|orn|min|nor|max|nand

op bits = dextr|extr|insert|ins_t|insn_t|sh|imask|bmerge|bsplit

// madd instructions
op madd = madd_u | maddm |maddh | maddq | maddrh | maddrq | maddsuh | maddsum | maddsur

op maddsur = maddsurh_1 | maddsurh_2 | maddsurh_3 | maddsurh_4 | maddsursh_1 | maddsursh_2 | maddsursh_3 | maddsursh_4 

op maddsurh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsur.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0E, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsurh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsur.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0D, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op maddsurh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsur.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0C, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsurh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsur.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0F, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op maddsursh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsurs.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2E, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsursh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsurs.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2D, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op maddsursh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsurs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2C, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsursh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsurs.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2F, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) + TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsum = maddsumh_1 | maddsumh_2 | maddsumh_3 | maddsumh_4 | maddsumsh_1 | maddsumsh_2 | maddsumsh_3 | maddsumsh_4 

op maddsumh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsum.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1E, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsumh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsum.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1D, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsumh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsum.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1C, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsumh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsum.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1F, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsumsh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsums.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3E, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsumsh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsums.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3D, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsumsh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsums.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3C, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsumsh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsums.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3F, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64 = d+((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsuh = maddsuh_1 | maddsuh_2 | maddsuh_3 | maddsuh_4 | maddsush_1 | maddsush_2 | maddsush_3 | maddsush_4 

op maddsuh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsu.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1A, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsuh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsu.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x19, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op maddsuh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsu.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x18, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsuh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsu.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1B, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op maddsush_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsus.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3A, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsush_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsus.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x39, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op maddsush_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsus.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x38, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddsush_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddsus.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3B, n, b.image, a.image, 0xC3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> + TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op maddrq = maddrq_1 | maddrq_2 | maddrsq_1 | maddrsq_2

op maddrq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x07, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result = d+TMP_1+0x8000;
		c=result<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}
	
op maddrq_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x06, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result = d+TMP_1+0x8000;
		c=result<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}
	
op maddrsq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x27, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result = d+TMP_1+0x8000;
		ssov(result,32,TMP_2);
		c=TMP_2<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}
	
op maddrsq_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x26, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result = d+TMP_1+0x8000;
		ssov(result,32,TMP_2);
		c=TMP_2<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}

op maddq = maddq_1 | maddq_2 | maddq_3| maddq_4| maddq_5| maddq_6| maddq_7| maddq_8| maddq_9| maddq_10 | maddsq_1 | maddsq_2 | maddsq_3| maddsq_4| maddsq_5| maddsq_6| maddsq_7| maddsq_8| maddsq_9| maddsq_10

op maddq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x02, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + (((a*b)<<n)>>32);
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1B, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + ((a*b)<<n);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x01, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + (((a*b<15..0>)<<n)>>16);
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x19, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + ((a*b<15..0>)<<n);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_5(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x00, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + (((a*b<31..16>)<<n)>>16);
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_6(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x18, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + ((a*b<31..16>)<<n);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_7(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x05, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d + TMP_1;
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op maddq_8(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1D, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d + (TMP_1<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_9(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x04, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d + TMP_1;
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddq_10(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1C, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d + (TMP_1<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x22, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + (((a*b)<<n)>>32);
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3B, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + ((a*b)<<n);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x21, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + (((a*b<15..0>)<<n)>>16);
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x39, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + ((a*b<15..0>)<<n);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_5(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x20, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + (((a*b<31..16>)<<n)>>16);
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_6(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x38, n ,b.image, a.image, 0x43)
	action = {
		result64 = d + ((a*b<31..16>)<<n);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_7(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x25, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d + TMP_1;
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op maddsq_8(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3D, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d + (TMP_1<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_9(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x24, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d + TMP_1;
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddsq_10(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3C, n ,b.image, a.image, 0x43)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d + (TMP_1<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddh = maddh_1 | maddh_2 | maddh_3 | maddh_4 | maddsh_1 | maddsh_2 | maddsh_3 | maddsh_4

op maddh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1A, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		c = TMP_3 :: TMP_4;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x19, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<31..16>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		c = TMP_3 :: TMP_4;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x18, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		c = TMP_3 :: TMP_4;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madd.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1B, n, b.image, a.image, 0x83)
	action = {
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<15..0>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<31..16>*b<31..16>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		c = TMP_3 :: TMP_4;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}

op maddsh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3A, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1 :: result_word0;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddsh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x39, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<31..16>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1 :: result_word0;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddsh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x38, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1 :: result_word0;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddsh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("madds.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3B, n, b.image, a.image, 0x83)
	action = {
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<15..0>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<31..16>*b<31..16>)<<n); endif;
		TMP_3=d<63..32>+TMP_1;
		TMP_4=d<31..0>+TMP_2;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1 :: result_word0;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}

op maddrh = maddrh_1 | maddrh_2 | maddrh_3 | maddrh_4 | maddrh_5 | maddrsh_1 | maddrsh_2 | maddrsh_3 | maddrsh_4 | maddrsh_5

op maddrh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x0E, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		c = TMP_3<31..16> :: TMP_4<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x0D, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<31..16>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		c = TMP_3<31..16> :: TMP_4<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x0C, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		c = TMP_3<31..16> :: TMP_4<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrh_5(c:reg_d,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1E, n, b.image, a.image, 0x43)
	action = {
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=d<63..32> +TMP_1+0x8000;
		TMP_4=d<31..0> +TMP_2+0x8000;
		c = TMP_3<31..16> :: TMP_4<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddr.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x0F, n, b.image, a.image, 0x83)
	action = {
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<15..0>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<31..16>*b<31..16>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		c = TMP_3<31..16> :: TMP_4<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}

op maddrsh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x2E, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrsh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x2D, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<15..0>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<31..16>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrsh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x2C, n, b.image, a.image, 0x83)
	action = {
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrsh_5(c:reg_d,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3E, n, b.image, a.image, 0x43)
	action = {
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<15..0> == 0x8000) && (b<15..0>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<31..16>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<15..0>*b<15..0>)<<n); endif;
		TMP_3=(d<63..32> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<31..0> :: 0x0000)+TMP_2+0x8000;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op maddrsh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("maddrs.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x2F, n, b.image, a.image, 0x83)
	action = {
		if ((a<15..0> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp1=1; else tmp1=0; endif;
		if ((a<31..16> == 0x8000) && (b<31..16>==0x8000) && (n==1)) then tmp0=1; else tmp0=0; endif;
		if (tmp1==1) then TMP_1=0x7FFFFFFF; else TMP_1=((a<15..0>*b<31..16>)<<n); endif;
		if (tmp0==1) then TMP_2=0x7FFFFFFF; else TMP_2=((a<31..16>*b<31..16>)<<n); endif;
		TMP_3=(d<31..16> :: 0x0000)+TMP_1+0x8000;
		TMP_4=(d<15..0> :: 0x0000)+TMP_2+0x8000;
		ssov(TMP_3, 32, result_word1);
		ssov(TMP_4, 32, result_word0);
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(TMP_3,TMP_4);
		stickyOverflow();
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}

op maddm = maddm_h_ll | maddm_h_lu | maddm_h_ul | maddm_h_uu | maddms_h_ll | maddms_h_uu | maddms_h_ul | maddms_h_lu

op maddms_h_lu(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddms.h %s, %s, %s, %s LU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3D, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half1(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		sc0 = (half0(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half1(a) * half0(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half0(a) * half1(b)) << n endif;
		result64 = d + ((result_word1 + result_word0) << 16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddms_h_ul(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddms.h %s, %s, %s, %s UL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3C, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half1(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		sc0 = (half0(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half1(a) * half1(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half0(a) * half0(b)) << n endif;
		result = d + ((result_word1 + result_word0) << 16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddms_h_uu(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddms.h %s, %s, %s, %s UU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3F, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half0(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		sc0 = (half1(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half0(a) * half1(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half1(a) * half1(b)) << n endif;
		result = d + ((result_word1 + result_word0) << 16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddms_h_ll(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddms.h %s, %s, %s, %s LL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3E, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half1(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		sc0 = (half0(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half1(a) * half0(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half0(a) * half0(b)) << n endif;
		result64 = d + ((result_word1 + result_word0) << 16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddm_h_uu(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddm.h %s, %s, %s, %s UU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1F, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half0(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		sc0 = (half1(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half0(a) * half1(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half1(a) * half1(b)) << n endif;
		result64 = d + ((result_word1 + result_word0) << 16);
		c = result64<63..0>;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddm_h_ul(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddm.h %s, %s, %s, %s UL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1C, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half1(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		sc0 = (half0(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half1(a) * half1(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half0(a) * half0(b)) << n endif;
		result64 = d + ((result_word1 + result_word0) << 16);
		c = result64<63..0>;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddm_h_lu(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddm.h %s, %s, %s, %s LU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1D, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half1(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		sc0 = (half0(a) == 0x8000) && (half1(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half1(a) * half0(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half0(a) * half1(b)) << n endif;
		result64 = d + ((result_word1 + result_word0) << 16);
		c = result64<63..0>;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddm_h_ll(c: reg_e, d: reg_e, a: reg_d, b: reg_d, n: card(2))
	syntax = format("maddm.h %s, %s, %s, %s LL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1E, n, b.image, a.image, 0x83)
	action = {
		sc1 = (half1(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		sc0 = (half0(a) == 0x8000) && (half0(b) == 0x8000) && (n == 1);
		result_word1 = if sc1 then 0x7FFFFFFF else (half1(a) * half0(b)) << n endif;
		result_word0 = if sc0 then 0x7FFFFFFF else (half1(a) * half1(b)) << n endif;
		result64 = d + ((result_word1 + result_word0) << 16);
		c = result64<63..0>;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}


op madd_u = madd_u_reg | madd_u_const | madd32_reg | madd32_const | madd64_reg | madd64_const | madds32_reg | madds32_const | madds64_reg | madds64_const | maddsu32_reg | maddsu32_const | maddsu64_reg | maddsu64_const

op madds64_const(c: reg_e,a: reg_d, d: reg_e,const:const9)
	syntax	= format("madds %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 111 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		sign_ext9to32(const, TMP_1);
		result64 = d + coerce(int(32), a) * TMP_1;
		ssov(result64, 64, c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op madds64_reg(c: reg_e, d: reg_e, a: reg_d, b: reg_d)
	syntax	= format("madds %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s 11101010 %s%s 00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(int(32), a) * coerce(int(32), b); 
		ssov(result64, 64, c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op madds32_const(c: reg_d,a: reg_d, d: reg_d,const:const9)
	syntax	= format("madds %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 101 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		sign_ext9to32(const, TMP_1);
		result64 = d + coerce(int(32), a) * TMP_1;
		ssov(result64, 32, c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op madds32_reg(c: reg_d, d: reg_d, a: reg_d, b: reg_d)
	syntax	= format("madds %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s10001010%s%s00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(int(32), a) * coerce(int(32), b); 
		ssov(result64, 32, c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op maddsu64_const(c: reg_e,a: reg_d, d: reg_e,const:const9)
	syntax	= format("madds.u %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 110 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		result64 = d + coerce(card(32), a) * coerce(card(32),const);
		suov(result64, 64, c);
		overflow64_u(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsu64_reg(c: reg_e, d: reg_e, a: reg_d, b: reg_d)
	syntax	= format("madds.u %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s 11101000 %s%s 00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(card(32), a) * coerce(card(32), b); 
		suov(result64, 64, c);
		overflow64_u(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op maddsu32_const(c: reg_d,a: reg_d, d: reg_d,const:const9)
	syntax	= format("madds.u %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 100 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		result64 = d + coerce(card(32), a) * coerce(card(32),const);
		suov(result64, 32, c);
		overflow_u(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op maddsu32_reg(c: reg_d, d: reg_d, a: reg_d, b: reg_d)
	syntax	= format("madds.u %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s10001000%s%s00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(card(32), a) * coerce(card(32), b); 
		suov(result64, 32, c);
		overflow_u(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op madd64_const(c: reg_e,a: reg_d, d: reg_e,const:const9)
	syntax	= format("madd %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 011 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		sign_ext9to32(const, TMP_1);
		result64 = d + coerce(card(32), a) * TMP_1;
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op madd64_reg(c: reg_e, d: reg_e, a: reg_d, b: reg_d)
	syntax	= format("madd %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s 01101010 %s%s 00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(card(32), a) * coerce(card(32), b); 
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op madd32_const(c: reg_d,a: reg_d, d: reg_d,const:const9)
	syntax	= format("madd %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 001 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		sign_ext9to32(const, TMP_1);
		result64 = d + coerce(card(32), a) * TMP_1;
		c = result64;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op madd32_reg(c: reg_d, d: reg_d, a: reg_d, b: reg_d)
	syntax	= format("madd %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s00001010%s%s00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(card(32), a) * coerce(card(32), b); 
		c = result64;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	otawa_sem = "SCRATCH(D(0));"

op madd_u_reg(c: reg_e, d: reg_e, a: reg_d, b: reg_d)
	syntax	= format("madd.u %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image	= format("%s%s01101000%s%s00000011", c.image, d.image, b.image, a.image)
	action	= { 
		result64 = d + coerce(card(32), a) * coerce(card(32), b);
	 	c = result64;
	 	overflow64_u(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	 }
	otawa_sem = "SCRATCH(D(0));"
	
op madd_u_const(c: reg_e, d: reg_e, a: reg_d,const:const9)
	syntax	= format("madd.u %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s 010 %s %s 00010011", c.image, d.image, const.image, a.image)
	action = {
		result64 = d + coerce(card(32), a) * coerce(card(32), const);
		c = result64;
		overflow64_u(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}










// float operations
op flt = cmpf | addf | mulf | divf | ftoi | ftoiz | ftoq31 | ftoq31z | ftou | ftouz | itof | maddf | msubf | q31tof | qseedf | updfl | utof | subf

op divf(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("div.f %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 01 %s %s %8b", c.image, 0x05, b.image, a.image, 0x4B)
	action = {
		denorm_to_zero(coerce(flots,a),fl0);
		denorm_to_zero(coerce(flots,b),fl1);
		isNan(a,tmp0);  
		isNan(b,tmp1);
		is_inf(a,tmp2);
		is_inf(b,tmp2);
		is_zero(a,tmp3);
		is_zero(b,tmp4);
		if(tmp0==1 || tmp1==1) then result=0x7FC00008;
		else if(tmp2 && tmp3) then result = 0x7FC00008;
		else if(tmp4 && tmp5) then result = 0x7FC00008;
		else 
			preres=fl0/fl1;
			denorm_to_zero(preres,norres);
			result = coerce(int(32),norres);
		endif; endif; endif;
		c = result<31..0>;
		
		isSnan(a,tmp1);
		isSnan(b,tmp0);
		if( tmp1 || tmp0 || (c==0x7FC00008)) then setFI=1; else setFI=0; endif;
		if (setFI==1) then FI=1; endif;
		
		if(norres >= 2**128) then setFV=1; else setFV=0; endif;
		if (setFV==1) then FV=1; endif;
		
		if(tmp4 && (~tmp2)) then setFZ=1; else setFZ=0; endif;
		if(setFZ==1) then FZ=1; endif;
		
		fp_abs(preres,fl2);
		if ( fl2 < 2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU==1) then FU=1; endif;
		
		if (preres!=coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if ((setFX==1) && (setFI==0)) then FX=1; endif;
		
		if (setFI || setFV || setFZ || setFU || setFX) then FS=1; else FS=0; endif;
	}
	
op ftoi(c: reg_d, a: reg_d)
	syntax = format("ftoi %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x10, a.image, 0x4B)
	action = {
		isNan(a,tmp1);
		if(tmp1) then result = 0;
		else if (coerce(flots,a)>(2**31 -1)) then result = 0x7FFFFFFF;
		else if (coerce(flots,a)<-2**31) then result = 0x80000000;
		else result = coerce(int(32),a);
		endif; endif; endif;
		c=result<31..0>;
		
		isNan(a,tmp0);
		if((coerce(flots,a)>(2**31 -1)) || (coerce(flots,a)<-2**31) || tmp1) then setFI = 1; else setFI=0; endif;
		if(setFI) then FI=1; endif;
		
		if(coerce(flots,a)!=coerce(flots,result)) then setFX=1; else setFX = 0; endif;
		if(setFX && ~setFI) then FX=1; endif;
		
		if(setFI || setFX) then FS=1; else FS=0; endif;
	}

op ftoiz(c: reg_d, a: reg_d)
	syntax = format("ftoiz %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x13, a.image, 0x4B)
	action = {
		isNan(a,tmp1);
		if(tmp1) then result = 0;
		else if (coerce(flots,a)>(2**31 -1)) then result = 0x7FFFFFFF;
		else if (coerce(flots,a)<-2**31) then result = 0x80000000;
		else result = coerce(int(32),a);
		endif; endif; endif;
		c=result<31..0>;
		
		isNan(a,tmp0);
		if((coerce(flots,a)>(2**31 -1)) || (coerce(flots,a)<-2**31) || tmp1) then setFI = 1; else setFI=0; endif;
		if(setFI) then FI=1; endif;
		
		if(coerce(flots,a)!=coerce(flots,result)) then setFX=1; else setFX = 0; endif;
		if(setFX && ~setFI) then FX=1; endif;
		
		if(setFI || setFX) then FS=1; else FS=0; endif;
	}

op ftoq31(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("ftoq31 %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 01 %s %s %8b", c.image, 0x11, b.image, a.image, 0x4B)
	action = {
		denorm_to_zero(coerce(flots,a),fl0);
		isNan(a,tmp0);
		if (tmp0 == 1) then result = 0;
		else
			preres = fl0*(2**(-b<8..0>));
			if (preres > coerce(flots,0x7FFFFFFF)) then result = 0x7FFFFFFF;
			else if(preres < -1.0) then result = 0x80000000;
				else result = preres;
				endif;
			endif;
		endif;
		c = result<31..0>;
		
		if(preres > coerce(flots,0x7FFFFFFF) || (preres < -1.0) || tmp0 ==1) then setFI=1; else setFI=0; endif;
		if (setFI==1) then FI=1; endif;
		
		if (coerce(flots,a) != coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if(setFX==1 && setFI==0) then FX=1; endif;
		
		if (setFI==1 || setFX==1) then FS=1; else FS=0; endif;
	}

op ftoq31z(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("ftoq31z %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 01 %s %s %8b", c.image, 0x18, b.image, a.image, 0x4B)
	action = {
		denorm_to_zero(coerce(flots,a),fl0);
		isNan(a,tmp0);
		if (tmp0 == 1) then result = 0;
		else
			preres = fl0*(2**(-b<8..0>));
			if (preres > coerce(flots,0x7FFFFFFF)) then result = 0x7FFFFFFF;
			else if(preres < -1.0) then result = 0x80000000;
				else result = preres;
				endif;
			endif;
		endif;
		c = result<31..0>;
		
		if(preres > coerce(flots,0x7FFFFFFF) || (preres < -1.0) || tmp0 ==1) then setFI=1; else setFI=0; endif;
		if (setFI==1) then FI=1; endif;
		
		if (coerce(flots,a) != coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if(setFX==1 && setFI==0) then FX=1; endif;
		
		if (setFI==1 || setFX==1) then FS=1; else FS=0; endif;
	}

op ftou(c: reg_d, a: reg_d)
	syntax = format("ftou %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x12, a.image, 0x4B)
	action = {
		isNan(a,tmp0);
		if(tmp0) then result = 0;
		else if (coerce(flots,a)>(2**31 -1)) then result = 0x7FFFFFFF;
		else if (coerce(flots,a)<0.0) then result = 0;
		else result = coerce(card(32),a);
		endif; endif; endif;
		c=result<31..0>;
		
		isNan(a,tmp0);
		if((coerce(flots,a)>(2**31 -1)) || (coerce(flots,a)<0.0) || tmp1) then setFI = 1; else setFI=0; endif;
		if(setFI) then FI=1; endif;
		
		if(coerce(flots,a)!=coerce(flots,result)) then setFX=1; else setFX = 0; endif;
		if(setFX && ~setFI) then FX=1; endif;
		
		if(setFI || setFX) then FS=1; else FS=0; endif;
	}

op ftouz(c: reg_d, a: reg_d)
	syntax = format("ftouz %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x17, a.image, 0x4B)
	action = {
		isNan(a,tmp0);
		if(tmp0) then result = 0;
		else if (coerce(flots,a)>(2**31 -1)) then result = 0x7FFFFFFF;
		else if (coerce(flots,a)<0.0) then result = 0;
		else result = coerce(card(32),a);
		endif; endif; endif;
		c=result<31..0>;
		
		isNan(a,tmp0);
		if((coerce(flots,a)>(2**31 -1)) || (coerce(flots,a)<0.0) || tmp1) then setFI = 1; else setFI=0; endif;
		if(setFI) then FI=1; endif;
		
		if(coerce(flots,a)!=coerce(flots,result)) then setFX=1; else setFX = 0; endif;
		if(setFX && ~setFI) then FX=1; endif;
		
		if(setFI || setFX) then FS=1; else FS=0; endif;
	}

op itof(c: reg_d, a: reg_d)
	syntax = format("itof %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x14, a.image, 0x4B)
	action = {
		fl0 = coerce(flots,coerce(int(32),a));
		c=fl0<31..0>;
		if(fl0!=coerce(flots,coerce(int(32),a))) then setFX=1; else setFX=0; endif;
		if (setFX) then FX=1; FS=1; else FS=0; endif;
	}

op maddf(c: reg_d, a: reg_d, b: reg_d, d:reg_d)
	syntax = format("madd.f %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image = format("%s %s %4b XX 01 %s %s %8b", c.image, d.image, 0x06, b.image, a.image, 0x6B)
	action = {
		denorm_to_zero(coerce(flots,a),fl0);
		denorm_to_zero(coerce(flots,b),fl1);
		denorm_to_zero(coerce(flots,d),fl2);
		isNan(a,tmp0);
		isNan(b,tmp1);
		isNan(d,tmp2);
		if(tmp0==1 || tmp1==1 || tmp2==1) then result = 0x7FC00002;
		else 
			is_inf(a,tmp0);
			is_zero(b,tmp1);
			if (tmp0==1 && tmp1==1) then result = 0x7FC00002;
			else
				is_inf(b,tmp0);
				is_zero(a,tmp1);
				if (tmp0==1 && tmp1==1) then result = 0x7FC00002;
				else
					is_neg_inf(a,tmp0);
					is_neg_inf(b,tmp1);
					is_pos_inf(a,tmp2);
					is_pos_inf(b,tmp3);
					is_neg_inf(d,tmp4);
					if(((tmp0 && tmp1) || (tmp2 && tmp3)) && tmp4) then result = 0x7FC00001;
					else
						if(((tmp0 && tmp3) || (tmp2 && tmp1)) && tmp4) then result = 0x7FC00001;
						else
							preres = (fl0*fl1)+fl2;
							denorm_to_zero(preres,norres);
							result = coerce(int(32),norres);
						endif;
					endif;
				endif;
			endif;
		endif;
		c=result<31..0>;
		
		isSnan(a,tmp0);
		isSnan(b,tmp1);
		isSnan(d,tmp2);
		
		if (tmp0 || tmp1 || tmp2 || result == 0x7FC00001 || result == 0x7FC00002) then setFI=1; else setFI=0; endif;
		if (setFI) then FI=1; endif;
		
		if (norres >= 2**128) then setFV=1; else setFV=0; endif;
		if(setFV) then FV=1; endif;
		
		fp_abs(preres,fl0);
		if(fl0<2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU) then FU=1; endif;
		
		if(preres != coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if(setFX==1 && setFI==0) then FX=1; endif;
		
		if (setFI || setFV || setFU || setFX) then FS=1; else FS = 0; endif;
	}

op msubf(c: reg_d, a: reg_d, b: reg_d, d:reg_d)
	syntax = format("msub.f %s, %s, %s, %s", c.syntax, d.syntax, a.syntax, b.syntax)
	image = format("%s %s %4b XX 01 %s %s %8b", c.image, d.image, 0x07, b.image, a.image, 0x6B)
	action = {
		denorm_to_zero(coerce(flots,a),fl0);
		denorm_to_zero(coerce(flots,b),fl1);
		denorm_to_zero(coerce(flots,d),fl2);
		isNan(a,tmp0);
		isNan(b,tmp1);
		isNan(d,tmp2);
		if(tmp0==1 || tmp1==1 || tmp2==1) then result = 0x7FC00002;
		else 
			is_inf(a,tmp0);
			is_zero(b,tmp1);
			if (tmp0==1 && tmp1==1) then result = 0x7FC00002;
			else
				is_inf(b,tmp0);
				is_zero(a,tmp1);
				if (tmp0==1 && tmp1==1) then result = 0x7FC00002;
				else
					is_neg_inf(a,tmp0);
					is_neg_inf(b,tmp1);
					is_pos_inf(a,tmp2);
					is_pos_inf(b,tmp3);
					is_neg_inf(d,tmp4);
					if(((tmp0 && tmp1) || (tmp2 && tmp3)) && tmp4) then result = 0x7FC00001;
					else
						if(((tmp0 && tmp3) || (tmp2 && tmp1)) && tmp4) then result = 0x7FC00001;
						else
							preres = (fl0*fl1)-fl2;
							denorm_to_zero(preres,norres);
							result = coerce(int(32),norres);
						endif;
					endif;
				endif;
			endif;
		endif;
		c=result<31..0>;
		
		isSnan(a,tmp0);
		isSnan(b,tmp1);
		isSnan(d,tmp2);
		
		if (tmp0 || tmp1 || tmp2 || result == 0x7FC00001 || result == 0x7FC00002) then setFI=1; else setFI=0; endif;
		if (setFI) then FI=1; endif;
		
		if (norres >= 2**128) then setFV=1; else setFV=0; endif;
		if(setFV) then FV=1; endif;
		
		fp_abs(preres,fl0);
		if(fl0<2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU) then FU=1; endif;
		
		if(preres != coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if(setFX==1 && setFI==0) then FX=1; endif;
		
		if (setFI || setFV || setFU || setFX) then FS=1; else FS = 0; endif;
	}


op q31tof(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("q31tof %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 01 %s %s %8b", c.image, 0x15, b.image, a.image, 0x4B)
	action = {
		preres = coerce(flots,a)*(2**(b<8..0>));
		result = coerce(int(32),preres);
		c=result<31..0>;
		
		fp_abs(preres,fl0);
		if(fl0<2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU) then FU=1; endif;
		
		if(preres != coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if(setFX==1) then FX=1; endif;
		
		if (setFU || setFX) then FS=1; else FS = 0; endif;
	}

op qseedf(c: reg_d, a: reg_d)
	syntax = format("qseed.f %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x19, a.image, 0x4B)
	action = {
		//denorm_to_zero(coerce(flots,a),fl0);
		//isNan(a,tmp0);
		//if(tmp0) then result = 0x7FC00004;
		//else
		//	if(fl0==+0.0) then result = 0x7F800000;
		//	else
		//		if(fl0==-0.0) then result = 0xFF800000;
		//		else
		//			if(fl0<0.0) then result = 0x7FC00004;
		//			else
		//				norres = fl0**(-0.5);
		//				result = coerce(int(32),norres);
		//			endif;
		//		endif;
		//	endif;
		//endif;
		//c=result<31..0>;
		
		//isSnan(a,tmp0);
		//if(tmp0 || c==0x7FC00004) then setFI=1; else setFI=0; endif;
		//if (setFI) then FI=1; FS=1; else FS=0; endif;
	}

op subf(c: reg_d, a: reg_d, d: reg_d)
	syntax = format("sub.f %s, %s, %s", c.syntax, d.syntax, a.syntax)
	image = format("%s %s 0011 XX 01 XXXX %s %8b", c.image, d.image, a.image, 0x6B)
	action = {
		denorm_to_zero(coerce(flots,a),fl0);
		denorm_to_zero(coerce(flots,d),fl1);
		isNan(a,tmp0);  
		isNan(d,tmp1);
		is_pos_inf(a,tmp2);
		is_neg_inf(d,tmp3);
		is_pos_inf(d,tmp4);
		is_neg_inf(a,tmp5);
		if(tmp0 || tmp1==1) then result=0x7FC00001;
		else if(tmp2 && tmp3) then result = 0x7FC00001;
		else if(tmp4 && tmp5) then result = 0x7FC00001;
		else 
			preres=fl0-fl1;
			denorm_to_zero(preres,norres);
			result = coerce(int(32),norres);
		endif; endif; endif;
		c = result<31..0>;
		
		isSnan(a,tmp1);
		isSnan(d,tmp0);
		if( tmp1 || tmp0) then setFI=1; else setFI=0; endif;
		if (setFI==1) then FI=1; endif;
		
		if(norres >= 2**128) then setFV=1; else setFV=0; endif;
		if (setFV==1) then FV=1; endif;
		
		fp_abs(preres,fl2);
		if ( fl2 < 2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU==1) then FU=1; endif;
		
		if (preres!=coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if ((setFX==1) && (setFI==0)) then FX=1; endif;
		
		if (setFI || setFV || setFU || setFX) then FS=1; else FS=0; endif;
	}

op updfl(a: reg_d)
	syntax = format("updfl %s", a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", a.image, 0x0C, a.image, 0x4B)
	action = {
		tmp0=(FS & ~a<15..15>) | (a<7..7> & a<15..15>);
		setFI=(FI & ~a<14..14>) | (a<6..6> & a<14..14>);
		setFV=(FV & ~a<13..13>) | (a<5..5> & a<13..13>);
		setFZ=(FZ & ~a<12..12>) | (a<4..4> & a<12..12>);
		setFU=(FU & ~a<11..11>) | (a<3..3> & a<11..11>);
		setFX=(FX & ~a<10..10>) | (a<2..2> & a<10..10>);
		TMP_1<1..0> = (PSW<25..24> & ~a<9..8>) | (a<1..0> & a<9..8>);
		PSW<31..24> = tmp0 :: setFI :: setFV :: setFZ :: setFU :: setFX :: TMP_1<1..0>;
	}

op utof(c: reg_d, a: reg_d)
	syntax = format("utof %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 01 XXXX %s %8b", c.image, 0x16, a.image, 0x4B)
	action = {
		fl0 = coerce(flots,coerce(card(32),a));
		c=fl0<31..0>;
		if(coerce(flots,c)!=coerce(flots,coerce(card(32),a))) then setFX=1; else setFX=0; endif;
		if (setFX) then FX=1; FS=1; else FS=0; endif;
	}

op cmpf(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("cmp.f %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s 00000000 XX 01 %s %s %8b", c.image, b.image, a.image,0x4B)
	action = {
		c<0..0> = fl_lt(coerce(flots,a),coerce(flots,b));
		c<1..1> = fl_eq(coerce(flots,a),coerce(flots,b));
		c<2..2> = fl_gt(coerce(flots,a),coerce(flots,b));
		isNan(a,tmp0);
		isNan(b,tmp1);
		c<3..3> = tmp0 || tmp1;
		c<4..4> = is_denorm(a);
		c<5..5> = is_denorm(b);
		isSnan(a,tmp2);
		isSnan(b,tmp3);
		if(tmp2 || tmp3) then setFI=1; else setFI=0; endif;
		if(setFI==1) then FI=1; FS=1; else FS=0; endif;
	}	
	

op addf(c: reg_d, d: reg_d, a: reg_d)
	syntax = format("add.f %s, %s, %s", c.syntax, d.syntax, a.syntax)
	image = format("%s %s %4b XX 01 XXXX %s %8b", c.image, d.image, 0x02, a.image,0x6B)
	action = { 
		denorm_to_zero(coerce(flots,a),fl0);
		denorm_to_zero(coerce(flots,d),fl1);
		isNan(a,tmp0);  
		isNan(d,tmp1);
		is_pos_inf(a,tmp2);
		is_neg_inf(d,tmp3);
		is_pos_inf(d,tmp4);
		is_neg_inf(a,tmp5);
		if(tmp0 || tmp1==1) then result=0x7FC00001;
		else if(tmp2 && tmp3) then result = 0x7FC00001;
		else if(tmp4 && tmp5) then result = 0x7FC00001;
		else 
			preres=fl0+fl1;
			denorm_to_zero(preres,norres);
			result = coerce(int(32),norres);
		endif; endif; endif;
		c = result<31..0>;
		
		isSnan(a,tmp1);
		isSnan(d,tmp0);
		if( tmp1 || tmp0) then setFI=1; else setFI=0; endif;
		if (setFI==1) then FI=1; endif;
		
		if(norres >= 2**128) then setFV=1; else setFV=0; endif;
		if (setFV==1) then FV=1; endif;
		
		fp_abs(preres,fl2);
		if ( fl2 < 2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU==1) then FU=1; endif;
		
		if (preres!=coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if ((setFX==1) && (setFI==0)) then FX=1; endif;
		
		if (setFI || setFV || setFU || setFX) then FS=1; else FS=0; endif;
	}	
	

op mulf(c: reg_d, a: reg_d, b: reg_d, pad: card(4))
	syntax = format("mul.f %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%4b00000100%4b%4b%4b01001011", c.image, pad, b.image, a.image)
	action = { 
		denorm_to_zero(coerce(flots,a),fl0);
		denorm_to_zero(coerce(flots,b),fl1);
		isNan(a,tmp0);  
		isNan(b,tmp1);
		if (tmp0 || tmp1) then result = 0x7FC00002;
		else
			is_inf(a,tmp0);
			is_zero(b,tmp1);
			is_inf(b,tmp2);
			is_zero(a,tmp3);
			if (tmp0 && tmp1) then result = 0x7FC00002;
			else
				if (tmp2 && tmp3) then result = 0x7FC00002;
				else
					preres = fl0*fl1;
					denorm_to_zero(preres,norres);
					result = coerce(int(32),norres);
				endif;
			endif;
		endif;
		c = result<31..0>;
		
		isSnan(a,tmp0);
		isSnan(b,tmp1);
		if (tmp0 || tmp1 || result == 0x7FC00002) then setFI=1; else setFI=0; endif;
		if (setFI) then FI=1; endif;
		
		if (norres >= 2**128) then setFV=1; else setFV=0; endif;
		if(setFV) then FV=1; endif;
		
		fp_abs(preres,fl0);
		if(fl0<2**(-126)) then setFU=1; else setFU=0; endif;
		if (setFU) then FU=1; endif;
		
		if(preres != coerce(flots,result)) then setFX=1; else setFX=0; endif;
		if(setFX==1 && setFI==0) then FX=1; endif;
		
		if (setFI || setFV || setFU || setFX) then FS=1; else FS = 0; endif;
		
	}	



// clz instruction
macro leading_zeros4(result, value) = \
	switch (value) { \
	case 0: result = result + 4; \
	case 1: result = result + 3; \
	case 2: result = result + 2; \
	case 3: result = result + 2; \
	case 4: result = result + 1; \
	case 5: result = result + 1; \
	case 6: result = result + 1; \
	case 7: result = result + 1; \
	}
op clz(c: reg_d, a: reg_d, foo: card(8))
	syntax	= format("clz %s,%s", c.syntax, a.syntax)
	image	= format("%s00011011%8b%s00001111", c.image, foo, a.image)
	action	= {
		TMP_1 = 0;
		leading_zeros4(TMP_1, a<31..28>);
		if TMP_1 == 4 then leading_zeros4(TMP_1, a<27..24>); endif;
		if TMP_1 == 8 then leading_zeros4(TMP_1, a<23..20>); endif;
		if TMP_1 == 12 then leading_zeros4(TMP_1, a<19..16>); endif;
		if TMP_1 == 16 then leading_zeros4(TMP_1, a<15..12>); endif;
		if TMP_1 == 20 then leading_zeros4(TMP_1, a<11..8>); endif;
		if TMP_1 == 24 then leading_zeros4(TMP_1, a<7..4>); endif;
		if TMP_1 == 28 then leading_zeros4(TMP_1, a<3..0>); endif;
		c = TMP_1;
	}
	otawa_sem = "SCRATCH(D(0));"
	
op clz_h(c: reg_d, a: reg_d)
	syntax = format("clz.h %s,%s", c.syntax, a.syntax)
	image	= format("%s %8b XX XX XXXX %s %8b", c.image, 0x7C, a.image, 0x0F)
	action = {
		result_halfword1=0;
		result_halfword0=0;
		leading_zeros4(result_halfword1, a<31..28>);
		if result_halfword1 == 4 then leading_zeros4(result_halfword1, a<27..24>); endif;
		if result_halfword1 == 8 then leading_zeros4(result_halfword1, a<23..20>); endif;
		if result_halfword1 == 12 then leading_zeros4(result_halfword1, a<19..16>); endif;
		leading_zeros4(result_halfword0, a<15..12>);
		if result_halfword0 == 4 then leading_zeros4(result_halfword0, a<11..8>); endif;
		if result_halfword0 == 8 then leading_zeros4(result_halfword0, a<7..4>); endif;
		if result_halfword0 == 12 then leading_zeros4(result_halfword0, a<3..0>); endif;
		c = result_halfword1 :: result_halfword0;
	}

//instruction clo
macro leading_ones4(result,value) =\
	switch (value) {\
		case 15: result=result+4;\
		case 14: result=result+3;\
		case 13: result=result+2;\
		case 12: result=result+2;\
		case 11: result=result+1;\
		case 10: result=result+1;\
		case 9: result=result+1;\
		case 8: result=result+1;\
		}
		
op clo(c :reg_d, a:reg_d)
	syntax = format("clo %s, %s",c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b",c.image, 0x1C, a.image, 0x0F)
	action = {
		TMP_1=0;
		leading_ones4(TMP_1,a<31..28>);
		if TMP_1 == 4 then leading_ones4(TMP_1, a<27..24>); endif;
		if TMP_1 == 8 then leading_ones4(TMP_1, a<23..20>); endif;
		if TMP_1 == 12 then leading_ones4(TMP_1, a<19..16>); endif;
		if TMP_1 == 16 then leading_ones4(TMP_1, a<15..12>); endif;
		if TMP_1 == 20 then leading_ones4(TMP_1, a<11..8>); endif;
		if TMP_1 == 24 then leading_ones4(TMP_1, a<7..4>); endif;
		if TMP_1 == 28 then leading_ones4(TMP_1, a<3..0>); endif;
		c = TMP_1;
	}
	
op clo_h(c :reg_d, a:reg_d)
	syntax = format("clo.h %s, %s",c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b",c.image, 0x7D, a.image, 0x0F)
	action = {
		result_halfword1=0;
		result_halfword0=0;
		leading_ones4(result_halfword1,a<31..28>);
		if result_halfword1 == 4 then leading_ones4(result_halfword1, a<27..24>); endif;
		if result_halfword1 == 8 then leading_ones4(result_halfword1, a<23..20>); endif;
		if result_halfword1 == 12 then leading_ones4(result_halfword1, a<19..16>); endif;
		leading_ones4(result_halfword0,a<15..12>);
		if result_halfword0 == 20 then leading_ones4(result_halfword0, a<11..8>); endif;
		if result_halfword0 == 24 then leading_ones4(result_halfword0, a<7..4>); endif;
		if result_halfword0 == 28 then leading_ones4(result_halfword0, a<3..0>); endif;
		c = result_halfword1 :: result_halfword0;
	}

op cls(c:reg_d,a:reg_d)
	syntax = format("cls %s, %s",c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x1D, a.image, 0x0F)
	action = {
		TMP_1=0;
		if(a<31..31>==0)then
			leading_zeros4(TMP_1, a<31..28>);
			if TMP_1 == 4 then leading_zeros4(TMP_1, a<27..24>); endif;
			if TMP_1 == 8 then leading_zeros4(TMP_1, a<23..20>); endif;
			if TMP_1 == 12 then leading_zeros4(TMP_1, a<19..16>); endif;
			if TMP_1 == 16 then leading_zeros4(TMP_1, a<15..12>); endif;
			if TMP_1 == 20 then leading_zeros4(TMP_1, a<11..8>); endif;
			if TMP_1 == 24 then leading_zeros4(TMP_1, a<7..4>); endif;
			if TMP_1 == 28 then leading_zeros4(TMP_1, a<3..0>); endif;
		else
			leading_ones4(TMP_1,a<31..28>);
			if TMP_1 == 4 then leading_ones4(TMP_1, a<27..24>); endif;
			if TMP_1 == 8 then leading_ones4(TMP_1, a<23..20>); endif;
			if TMP_1 == 12 then leading_ones4(TMP_1, a<19..16>); endif;
			if TMP_1 == 16 then leading_ones4(TMP_1, a<15..12>); endif;
			if TMP_1 == 20 then leading_ones4(TMP_1, a<11..8>); endif;
			if TMP_1 == 24 then leading_ones4(TMP_1, a<7..4>); endif;
			if TMP_1 == 28 then leading_ones4(TMP_1, a<3..0>); endif;
		endif;
		c = TMP_1;
	}

op cls_h(c:reg_d,a:reg_d)
	syntax = format("cls.h %s, %s",c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x7E, a.image, 0x0F)
	action = {
		result_halfword1=0;
		result_halfword0=0;
		if(a<31..31>==0)then
			leading_zeros4(result_halfword1, a<31..28>);
			if result_halfword1 == 4 then leading_zeros4(result_halfword1, a<27..24>); endif;
			if result_halfword1 == 8 then leading_zeros4(result_halfword1, a<23..20>); endif;
			if result_halfword1 == 12 then leading_zeros4(result_halfword1, a<19..16>); endif;
		else
			leading_ones4(result_halfword1,a<31..28>);
			if result_halfword1 == 4 then leading_ones4(result_halfword1, a<27..24>); endif;
			if result_halfword1 == 8 then leading_ones4(result_halfword1, a<23..20>); endif;
			if result_halfword1 == 12 then leading_ones4(result_halfword1, a<19..16>); endif;
		endif;
		if(a<15..15>==0)then
			leading_zeros4(result_halfword0, a<15..12>);
			if result_halfword0 == 4 then leading_zeros4(result_halfword0, a<11..8>); endif;
			if result_halfword0 == 8 then leading_zeros4(result_halfword0, a<7..4>); endif;
			if result_halfword0 == 12 then leading_zeros4(result_halfword0, a<3..0>); endif;
		else
			leading_ones4(result_halfword0,a<15..12>);
			if result_halfword0 == 20 then leading_ones4(result_halfword0, a<11..8>); endif;
			if result_halfword0 == 24 then leading_ones4(result_halfword0, a<7..4>); endif;
			if result_halfword0 == 28 then leading_ones4(result_halfword0, a<3..0>); endif;
		endif;
		c = (result_halfword1-1) :: (result_halfword0);		
	}

// (un)pack instructions
op pack_unpack = pack | unpack

op pack(c:reg_d, d:reg_e, a:reg_d)
	syntax = format("pack %s, %s, %s", c.syntax, d.syntax, a.syntax)
	image = format("%s %s 0000 XX 00 XXXX %s %8b", c.image, d.image, a.image, 0x6B)
	action = {
		int_exp = d<63..32>; //int_exp
		int_mant = d<31..0>;	//int_mant
		tmp1 = int_mant<7..7> & (int_mant<8..8> | int_mant<6..0> | CFLAG);
		if ((int_mant<31..31> == 0) && (int_exp == 255)) then 
			 fp_exp=255;
			 fp_frac=int_mant<30..8>;
		else if((int_mant<31..31>==1) && (int_exp >=127)) then
			fp_exp = 255;
			fp_frac = 0;
		else if((int_mant<31..31> == 1) && (int_exp <= -128)) then
			fp_exp = 0;
			fp_frac = 0;
		else if(int_mant == 0) then
			fp_exp = 0;
			fp_frac = 0;
		else
			if(int_mant<31..31>==0) then
				TMP_1 = 0;
			else
				TMP_1 = int_exp + 128;
			endif;
			TMP_2<30..0> = (TMP_1<7..0> :: int_mant<30..8>)+tmp1;
			fp_exp = TMP_2<30..23>;
			fp_frac = TMP_2<22..0>;
		endif;
		endif;
		endif;
		endif;
		c<31..31> = a<31..31>;
		c<30..23> = fp_exp;
		c<22..0> = fp_frac;
	}

op unpack(c: reg_e, a: reg_d, foo1: card(2), foo2: card(4))
	syntax	= format("unpack %s, %s", c.syntax, a.syntax)
	image	= format("%s00001000%2b00%4b%s01001011", c.image, foo1, foo2, a.image)
	action	= {
		fp_exp<0..7> = a<23..30>;
		fp_frac<0..22> = a<0..22>;
		if fp_exp == 255 then
			int_exp = 255;
			int_mant<30..31> = 0;
			int_mant<7..29> = fp_frac<0..22>;
			int_mant<0..6> = 0;
		else
			if fp_exp == 0 && fp_frac == 0 then
				int_exp = -127;
				int_mant = 0;
			else
				if fp_exp == 0 && fp_frac != 0 then
					int_exp = -126;
					int_mant<30..31> = 0;
					int_mant<7..29> = fp_frac<0..22>;
					int_mant<0..7> = 0;
				else
					int_exp = fp_exp - 127;
					int_mant<30..31> = 0;
					int_mant<7..29> = fp_frac<0..2>;
					int_mant<0..6> = 0;
				endif;
			endif;
		endif;
		c<32..63> = int_exp<0..31>;
		c<0..31> = int_mant<0..31>;
	}
	otawa_sem = "SCRATCH(D(0));"


op abs = abs_reg | abss | abs_b | abs_h | abss_h

op abss_h(c: reg_d, b: reg_d)
	syntax = format("abss.h %s, %s", c.syntax, b.syntax)
	image = format("%s %8b XX XX %s XXXX %08b", c.image, 0x7D, b.image, 0x0B)
	action = {
		result_halfword1 = vabs(half1(b));
		result_halfword0 = vabs(half0(b));
		ssov(result_halfword1,16,tmp_half1);
		ssov(result_halfword0,16,tmp_half0);
		overflow_h(result_halfword0,result_halfword1);
		stickyOverflow();
		advancedOverflow_h(result_halfword0,result_halfword1);
		stickyAdvancedOverflow();
		c = tmp_half1 :: tmp_half0;
	}

op abs_h(c: reg_d, b: reg_d)
	syntax = format("abs.h %s, %s", c.syntax, b.syntax)
	image = format("%s %8b XX XX %s XXXX %08b", c.image, 0x7C, b.image, 0x0B)
	action = {
		result_halfword1 = vabs(half1(b));
		result_halfword0 = vabs(half0(b)); 
		overflow_h(result_halfword0,result_halfword1);
		stickyOverflow();
		advancedOverflow_h(result_halfword0,result_halfword1);
		stickyAdvancedOverflow();
		c = result_halfword1<15..0> :: result_halfword0<15..0>;
	}

op abs_b(c: reg_d, b: reg_d)
	syntax = format("abs.b %s, %s", c.syntax, b.syntax)
	image = format("%s %8b XX XX %s XXXX %8b", c.image, 0x5C, b.image, 0x0B)
	action = {
		result_byte3 = vabs(byte3(b));
		result_byte2 = vabs(byte2(b));
		result_byte1 = vabs(byte1(b));
		result_byte0 = vabs(byte0(b));
		overflow_b(result_byte3,result_byte2,result_byte1,result_byte0);
		stickyOverflow();
		advancedOverflow_b(result_byte3,result_byte2,result_byte1,result_byte0);
		stickyAdvancedOverflow();
		c = result_byte3<7..0> :: result_byte2<7..0> :: result_byte1<7..0> :: result_byte0<7..0>;
	}

op abss (c: reg_d, b:reg_d)
	syntax = format("abss %s, %s",c.syntax,b.syntax)
	image = format("%s %8b XX XX %s XXXX %8b", c.image, 0x1D, b.image, 0x0B)
	action = {
		if b >=0 then
			result = b;
		else
			result = 0 - b;
		endif;
		
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
		ssov(result,32,c);
	}

op abs_reg (c:reg_d,b:reg_d,foo1:card(4),foo2:card(4))
	syntax = format("abs %s,%s", c.syntax, b.syntax)
	image = format("%s00011100%4b%s%4b00001011",c.image,foo1,b.image,foo2)
	action = 	{
			if (coerce(int(32),b) >= 0)
			then
				result64 = coerce(int(64),b);
			else
				TMP64_1 = 0;
				result64 = coerce(int(64),TMP64_1)-coerce(int(64),b);
			endif;
			overflow(result64);
			stickyOverflow();
			advancedOverflow(result64);
			stickyAdvancedOverflow();
			c = result64<0..31>;
			}
	

op absdif = absdif_reg|absdif_const9|absdifs_reg|absdifs_const9|absdif_b|absdif_h|absdifs_h

op absdifs_h(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("absdifs.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x6F, b.image, a.image, 0x0B)
	action = {
		result_halfword1 = fabsdif(half1(a), half1(b));
		result_halfword0 = fabsdif(half0(a), half0(b));
		ssov(result_halfword1,16,tmp_half1);
		ssov(result_halfword0,16,tmp_half0);
		overflow_h(result_halfword0,result_halfword1);
		stickyOverflow();
		advancedOverflow_h(result_halfword0,result_halfword1);
		stickyAdvancedOverflow();
		c = tmp_half1 :: tmp_half0;
	}

op absdif_b(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("absdif.b %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x4E, b.image, a.image, 0x0B)
	action = {
		result_byte3 = fabsdif(byte3(a), byte3(b));
		result_byte2 = fabsdif(byte2(a), byte2(b));
		result_byte1 = fabsdif(byte1(a), byte1(b));
		result_byte0 = fabsdif(byte0(a), byte0(b));
		overflow_b(result_byte3,result_byte2,result_byte1,result_byte0);
		stickyOverflow();
		advancedOverflow_b(result_byte3,result_byte2,result_byte1,result_byte0);
		stickyAdvancedOverflow();
		c = result_byte3<7..0> :: result_byte2<7..0> :: result_byte1<7..0> :: result_byte0<7..0>;
	}
	
op absdif_h(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("absdif.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x6E, b.image, a.image, 0x0B)
	action = {
		result_halfword1 = fabsdif(half1(a), half1(b));
		result_halfword0 = fabsdif(half0(a), half0(b));
		overflow_h(result_halfword0,result_halfword1);
		stickyOverflow();
		advancedOverflow_h(result_halfword0,result_halfword1);
		stickyAdvancedOverflow();
		c = result_halfword1<15..0> :: result_halfword0<15..0>;
	}

op absdifs_reg (c:reg_d,a:reg_d,b:reg_d)
   syntax = format("absdifs %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s %8b XX XX %s %s %8b",c.image,0x0F,b.image,a.image,0x0B)
   action = 	{
		if (coerce(int(32),a) > coerce(int(32),b))
		then
			result64 = coerce(int(64),a)-coerce(int(64),b);
		else
			result64 = coerce(int(64),b)-coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}
		
op absdifs_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("absdifs %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s %7b %s %s %8b",c.image,0x0F,const.image,a.image,0x8B)
   action = 	{
		sign_ext9to32(const, TMP_1);
		if (coerce(int(32),a) > coerce(int(32),TMP_1))
		then
			result64 = coerce(int(64),a)-coerce(int(64),TMP_1);
		else
			result64 = coerce(int(64),TMP_1)-coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}

op absdif_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("absdif %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001110%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (coerce(int(32),a) > coerce(int(32),b))
		then
			result64 = coerce(int(64),a)-coerce(int(64),b);
		else
			result64 = coerce(int(64),b)-coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op absdif_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("absdif %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001110%s%s10001011",c.image,const.image,a.image)
   action = 	{
		TMP_1<8..0> = const<8..0>;
		if(TMP_1<8..8> == 1)
		then
			TMP_1<31..9> = 0xFFFFFF;
		else
			TMP_1<31..9> = 0x000000;
		endif;
		if (coerce(int(32),a) > coerce(int(32),TMP_1))
		then
			result64 = coerce(int(64),a)-coerce(int(64),TMP_1);
		else
			result64 = coerce(int(64),TMP_1)-coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op add = add_reg|add_const9|add_a_reg|addc_reg|addc_const9|addi|addih|addih_a|addsc_a|addx_reg|cadd_reg|cadd_const9|adds_reg|adds_const9|addsh_s|addsh_u|addsc_at|addx_const9|caddn_const9|caddn_reg|adds_u_reg|adds_u_const|add_b|add_h

op add_h(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("add.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x60, b.image, a.image, 0x0B)
	action = {
		result_halfword1 = half1(a) + half1(b);
		result_halfword0 = half0(a) + half0(b);
		overflow_h(result_halfword0,result_halfword1);
		stickyOverflow();
		advancedOverflow_h(result_halfword0,result_halfword1);
		stickyAdvancedOverflow();
		c = result_halfword1<15..0> :: result_halfword0<15..0>;
	}

op add_b(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("add.b %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x40, b.image, a.image, 0x0B)
	action = {
		result_byte3 = byte3(a) + byte3(b);
		result_byte2 = byte2(a) + byte2(b);
		result_byte1 = byte1(a) + byte1(b);
		result_byte0 = byte0(a) + byte0(b);
		overflow_b(result_byte3,result_byte2,result_byte1,result_byte0);
		stickyOverflow();
		advancedOverflow_b(result_byte3,result_byte2,result_byte1,result_byte0);
		stickyAdvancedOverflow();
		c = result_byte3<7..0> :: result_byte2<7..0> :: result_byte1<7..0> :: result_byte0<7..0>;
	}

op adds_u_const (a : reg_d , c : reg_d , const : const9)
		syntax = format("adds.u %s,%s,%s",c.syntax,a.syntax,const.syntax)
		image = format("%s %7b %s %s %8b",c.image,0x03,const.image,a.image,0x8B)
		action = {
			sign_ext9to32(const,tmp1);
			result64 = coerce(int(64),a)+coerce(int(64),tmp1);
			overflow_u(result64);
			stickyOverflow();
			advancedOverflow(result64);
			stickyAdvancedOverflow();
			suov(result64,32,c);
		}

op adds_u_reg(a : reg_d , c : reg_d , b : reg_d)
		syntax = format("adds.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
		image = format("%s %8b XX XX %s %s %8b",c.image,0x03,b.image,a.image,0x0B)
		action = {
			result64 = coerce(int(64),a)+coerce(int(64),b);
			overflow_u(result64);
			stickyOverflow();
			advancedOverflow(result64);
			stickyAdvancedOverflow();
			suov(result64,32,c);
		}

op add_reg (c:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("add %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000000%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)+coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
 		}
 	otawa_sem = "SCRATCH(PSW); ADD(D(0), D(1), D(2));"

op add_const9 (c:reg_d, a:reg_d, const:const9)
   syntax = format("add %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000000%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const, TMP_1);
		result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
 		}
 	otawa_sem = "SCRATCH(PSW); SETI(T1, S9(2)); ADD(D(0), D(1), T1);"

op add_a_reg (c:reg_a, a:reg_a, b:reg_a, foo:card(4))
   syntax = format("add.a %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000001%4b%s%s00000001",c.image,foo,b.image,a.image)
   action = 	{
		result = a+b;
		c = result;
	    	}
	otawa_sem = "ADD(A(0), A(1), A(2));"

op addc_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("addc %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000101%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)+coerce(int(64),b)+coerce(int(64),CFLAG);
		carry(result64);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op addc_const9(c:reg_d,a:reg_d,const:const9)
   syntax = format("addc %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000101%s%s10001011",c.image,const.image,a.image)
   action = 	{
		zero_ext32(const,TMP_1,9);
		result64 = coerce(int(64),a)+coerce(int(64),TMP_1)+coerce(int(64),CFLAG);
		carry(result64);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op addi (c:reg_d, const:card(16), a:reg_d)
   syntax = format("addi %s,%s,%d",c.syntax,a.syntax,const)
   image = format("%s%16b%s00011011",c.image,const,a.image)
   action = 	{
		sign_ext16to32(const, TMP_1);
		result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SETI(T1, S16(1)); ADD(D(0), D(2), T1);"

op addih (c:reg_d, const:const16, a:reg_d)
     syntax = format("addih %s,%s,%s",c.syntax,a.syntax,const.syntax)
     image = format("%s%s%s10011011",c.image,const.image,a.image)
     action = 	{
		zero_ext32(const,TMP_1,16);
		TMP_1 = TMP_1 << 16;
		result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SETI(T1, U16(1)); SETI(T2, 16); SHL(T1, T1, T2); ADD(D(0), D(2), T1);"

op addih_a (c: reg_a, const: const16, a: reg_a)
    syntax = format("addih.a %s,%s,%s",c.syntax,a.syntax,const.syntax)
    image = format("%s%s%s00010001",c.image,const.image,a.image)
    action = 	{
		zero_ext32(const,TMP_1,16);
		TMP_1 = TMP_1 << 16;
		result = a+coerce(int(32),TMP_1);
		c = result;
	}
	otawa_sem = "SETI(T1, U16(1)); SETI(T2, 16); SHL(T1, T1, T2); ADD(A(0), T1, A(2));"

op adds_reg (c: reg_d, a: reg_d, b: reg_d, foo: card(4))
    syntax = format("adds %s,%s,%s",c.syntax,a.syntax,b.syntax)
    image = format("%s00000010%4b%s%s00001011",c.image,foo,b.image,a.image)
    action = 	{
		result64 = coerce(int(64),a)+coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
	}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"


op adds_const9 (c:reg_d,const:const9,a:reg_d)
    syntax = format("adds %s,%s,%s",c.syntax,a.syntax,const.syntax)
    image = format("%s0000010%s%s10001011",c.image,const.image,a.image)
    action = 	{
		sign_ext9to32(const, TMP_1);
		result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op addsh_s (c:reg_d,b:reg_d,a:reg_d,foo:card(4))
   syntax = format("adds.h %s,%s,%s",c.syntax,b.syntax,a.syntax)
   image = format("%s01100010%4b%s%s00001011",c.image,foo,b.image,a.image)
   action =	{
		TMP_1 = a<31..16> + b<31..16>;
		TMP_2 = a<15..0> + b<15..0>;
		if ( (TMP_1 > 0x7FFF) || (TMP_1 < 0xFFFF8000) || (TMP_2 > 0x7FFF) || (TMP_2 < 0xFFFF8000) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		if ( (TMP_1<15..15> && TMP_1<14..14>) || (TMP_2<15..15> && TMP_2<14..14>) )
		then
			AVFLAG = 1;
		else
			AVFLAG = 0;
		endif;
		stickyAdvancedOverflow();
		ssov(TMP_1,16,c);
		c = c << 16;
		ssov(TMP_2,16,TMP_1);
		c = c + TMP_1;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op addsh_u (c:reg_d,b:reg_d,a:reg_d,foo:card(4))
   syntax = format("adds.hu %s,%s,%s",c.syntax,b.syntax,a.syntax)
   image = format("%s01100011%4b%s%s00001011",c.image,foo,b.image,a.image)
   action =	{
		TMP_1 = a<31..16> + b<31..16>;
		TMP_2 = a<15..0> + b<15..0>;
		if ( (TMP_1 > 0xFFFF) || (TMP_1 < 0) || (TMP_2 > 0xFFFF) || (TMP_2 < 0) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		if ( (TMP_1<15..15> && TMP_1<14..14>) || (TMP_2<15..15> && TMP_2<14..14>) )
		then
			AVFLAG = 1;
		else
			AVFLAG = 0;
		endif;
		stickyAdvancedOverflow();
		suov(TMP_1,16,c);
		c = c << 16;
		suov(TMP_2,16,TMP_1);
		c = c + TMP_1;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op addsc_a (c: reg_a, a: reg_a, b: reg_a, foo:card(2), n: card(2))
   syntax = format("addsc.a %s,%s,%s,%d",c.syntax,b.syntax,a.syntax,n)
   image = format("%s01100000%2b%2b%s%s00000001",c.image,foo,n,b.image,a.image)
   action = 	{
		TMP_1 = a << n;
		c = b+TMP_1;
		}
	otawa_sem = "SETI(T1, U2(4)); SHL(T2, A(1), T1); ADD(A(0), A(2), T2);"

op addsc_at (c:reg_a, a:reg_a, b:reg_a, foo:card(4))
   syntax = format("addsc.at %s,%s,%s",c.syntax,b.syntax,a.syntax)
   image = format("%s01100010%4b%s%s00000001",c.image,foo,b.image,a.image)
   action = 	{
		TMP_1 = a << 3;
		c = b+TMP_1;
		c = c & 0xFFFFFFFC;
	}
	otawa_sem = "SCRATCH(A(0));"

op addx_reg (c:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("addx %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000100%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)+coerce(int(64),b);
		carry(result64);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}
	otawa_sem = "SCRATCH(PSW); ADD(D(0), D(1), D(2));"

op addx_const9 (c:reg_d, a:reg_d, const:const9)
   syntax = format("addx %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000100%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const, TMP_1);
		result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		carry(result64);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}
	otawa_sem = "SCRATCH(PSW); SETI(T1, S9(2)); ADD(D(0), D(1), T1);"

op cadd_reg (a:reg_d, b:reg_d, c:reg_d, d:reg_d, foo:card(4))
   syntax = format("cadd %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s0000%4b%s%s00101011",c.image,d.image,foo,b.image,a.image)
   action = 	{
		if (d != 0)
		then
			result64 = coerce(int(64),a)+coerce(int(64),b);
		else
			result64 = coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op cadd_const9 (c:reg_d,d:reg_d,a:reg_d,const:const9)
   syntax = format ("cadd %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,const.syntax)
   image = format("%s%s000%s%s10101011",c.image,d.image,const.image,a.image)
   action = 	{
		if (d != 0)
		then
			sign_ext9to32(const,TMP_1);
			result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		else
			result64 = coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op caddn_const9 (c:reg_d,d:reg_d,a:reg_d,const:const9)
   syntax = format ("caddn %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,const.syntax)
   image = format("%s%s001%s%s10101011",c.image,d.image,const.image,a.image)
   action = 	{
		if (d == 0)
		then
			sign_ext9to32(const,TMP_1);
			result64 = coerce(int(64),a)+coerce(int(64),TMP_1);
		else
			result64 = coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op caddn_reg (a:reg_d,b:reg_d,c:reg_d,d:reg_d,foo:card(4))
   syntax = format("caddn %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s0001%4b%s%s00101011",c.image,d.image,foo,b.image,a.image)
   action = 	{
		if (d == 0)
		then
			result64 = coerce(int(64),a)+coerce(int(64),b);
		else
			result64 = coerce(int(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"


// and instructions
op and  = and_reg | and_const9
		| and_lt_u_reg | and_lt_u_const9 | and_lt_reg | and_lt_const
		| andn_reg |andn_const9 |andn_t
		| and_nor_t
		| andt
		| and_eq_const | and_eq_reg 
		| and_and_t | and_andn_t | and_or_t 
		| and_ne_reg |and_ne_const
		| and_ge_reg | and_ge_const | and_geu_reg |and_geu_const
		

op and_ge_reg(a : reg_d, b:reg_d, c:reg_d)
	syntax = format("and.ge %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b",c.image, 0x24, b.image, a.image, 0x0B)
	action = {
		if(coerce(int(32),a) >= coerce(int(32),b)) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> & tmp1;
	}
	
op and_ge_const(a : reg_d, const:const9, c:reg_d)
	syntax = format("and.ge %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x24, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const, TMP_1);
		if(coerce(int(32),a) >= coerce(int(32),TMP_1)) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> & tmp1;
	}
	
op and_geu_reg(a : reg_d, b:reg_d, c:reg_d)
	syntax = format("and.ge.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b",c.image, 0x25, b.image, a.image, 0x0B)
	action = {
		if(coerce(card(32),a) >= coerce(card(32),b)) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> & tmp1;
	}
	
op and_geu_const(a : reg_d, const:const9, c:reg_d)
	syntax = format("and.ge.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x25, const.image, a.image, 0x8B)
	action = {
		TMP_1 = coerce(card(32),const);
		if(coerce(card(32),a) >= coerce(card(32),TMP_1)) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> & tmp1;
	}

	
op and_ne_reg(a : reg_d,b : reg_d,c : reg_d)
	syntax = format("and.ne %s, %s, %s",c.syntax,a.syntax,b.syntax)
	image = format("%s %8b XX XX %s %s %8b",c.image, 0x21, b.image, a.image, 0x0B)
	action = {
		if (a==b) then
			tmp1=0;
		else
			tmp1=1;
		endif;
		c<0..0> = tmp1 & c<0..0>;
	}

op and_ne_const	(a : reg_d,c : reg_d,const : const9)
	syntax = format("and.ne %s, %s, %s",c.syntax,a.syntax,const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x21, const.image, a.image, 0x8B)	
	action = {
		sign_ext9to32(const, TMP_1);
		if (a==TMP_1) then
			tmp1=0;
		else
			tmp1=1;
		endif;
		c<0..0> = tmp1 & c<0..0>;
	}
		
op and_and_t(a:reg_d, b:reg_d, c:reg_d, pos1:pos, pos2:pos)
	syntax = format("and.and.t %s, %s, %s, %s, %s", c.syntax, a.syntax, pos1.syntax, b.syntax, pos2.syntax)
	image = format("%s %s %2b %s %s %s %8b",c.image, pos2.image, 0x00, pos1.image, b.image, a.image, 0x47)
	action = {
		tmp1 = a<pos1..pos1> & b<pos2..pos2>;
		c<0..0> = c<0..0> & tmp1;
	}
	
op and_andn_t(a:reg_d, b:reg_d, c:reg_d, pos1:pos, pos2:pos)
	syntax = format("and.andn.t %s, %s, %s, %s, %s", c.syntax, a.syntax, pos1.syntax, b.syntax, pos2.syntax)
	image = format("%s %s %2b %s %s %s %8b",c.image, pos2.image, 0x03, pos1.image, b.image, a.image, 0x47)
	action = {
		tmp1 = a<pos1..pos1> & (~(b<pos2..pos2>));
		c<0..0> = c<0..0> & tmp1;
	}
	
op and_or_t(a:reg_d, b:reg_d, c:reg_d, pos1:pos, pos2:pos)
	syntax = format("and.or.t %s, %s, %s, %s, %s", c.syntax, a.syntax, pos1.syntax, b.syntax, pos2.syntax)
	image = format("%s %s %2b %s %s %s %8b",c.image, pos2.image, 0x01, pos1.image, b.image, a.image, 0x47)
	action = {
		tmp1 = a<pos1..pos1> | b<pos2..pos2>;
		c<0..0> = c<0..0> & tmp1;
	}

op and_eq_const(c: reg_d, a: reg_d, const9: int(9))
	syntax	= format("and.eq %s, %s, %d", c.syntax, a.syntax, const9)
	image	= format("%s0100000%9b%s10001011", c.image, const9, a.image)
	action	= { c<0..0> = c<0..0> & (a == const9); }
	otawa_sem = "SCRATCH(D(0));"

op and_eq_reg(c:reg_d, a: reg_d, b: reg_d, foo: card(4))
	syntax	= format("and.eq %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image	= format("%s00100000%4b%s%s00001011", c.image, foo, b.image, a.image)
	action	= { c<0..0> = c<0..0> & (a == b); }
	otawa_sem = "SCRATCH(D(0));"

op and_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("and %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001000%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = 	{
		c = a&b;
		}
	otawa_sem = "SCRATCH(D(0));"

op and_const9(c:reg_d,a:reg_d,const:const9)
   syntax = format("and %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001000%s%s10001111",c.image,const.image,a.image)
   action = 	{
		zero_ext32(const, TMP_1,16);
		c = a&TMP_1;
		}
	otawa_sem = "SCRATCH(D(0));"


// and.lt instructions

op and_lt_u_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("and.lt.u %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s00100011%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (coerce(card(32),a) < coerce(card(32),b))
		then
			TMP_1 = 1;
		else
			TMP_1 = 0;
		endif;
		TMP_1<0..0> = c<0..0> & TMP_1<0..0>;
		c = (c<31..1>::TMP_1<0..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op and_lt_u_const9
(c:reg_d,a:reg_d,const:const9)
   syntax = format("and.lt.u %s, %s, %s",c.syntax,a.syntax,const.syntax)
   image = format("%s0100011%s%s10001011",c.image,const.image,a.image)
   action = 	{
		TMP_2 = coerce(card(32), const);
		if (coerce(card(32),a) < coerce(card(32),TMP_2))
		then
			TMP_1 = 1;
		else
			TMP_1 = 0;
		endif;
		TMP_1<0..0> = c<0..0> & TMP_1<0..0>;
		c = (c<31..1>::TMP_1<0..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op and_lt_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("and.lt %s, %s, %s",c.syntax,a.syntax,const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x22, const.image, a.image, 0x8B)
	action = {
		TMP_2 = coerce(int(32), const);
		if (coerce(int(32),a) < coerce(int(32),TMP_2))
		then
			TMP_1 = 1;
		else
			TMP_1 = 0;
		endif;
		TMP_1<0..0> = c<0..0> & TMP_1<0..0>;
		c = (c<31..1>::TMP_1<0..0>);
	}
	
op and_lt_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("and.lt %s, %s, %s",c.syntax,a.syntax,b.syntax)
	image = format("%s %8b XX XX %s %s %8b",c.image, 0x22, b.image, a.image, 0x0B)
	action = {
		if (coerce(int(32),a) < coerce(int(32),b))
		then
			TMP_1 = 1;
		else
			TMP_1 = 0;
		endif;
		TMP_1<0..0> = c<0..0> & TMP_1<0..0>;
		c = (c<31..1>::TMP_1<0..0>);
	}

op andn_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("andn %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001110%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = 	{
		c = a & (~b);
		}
	otawa_sem = "SCRATCH(D(0));"

op andn_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("andn %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001110%s%s10001111",c.image,const.image,a.image)
   action = 	{
		//zero_ext32(const, TMP_1,9);
		TMP_1<0..8> = const<0..8>;
		TMP_1<9..31> = 0;
		c = a&(~TMP_1);
		}
	otawa_sem = "SCRATCH(D(0));"

op andn_t(c:reg_d, a:reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("andn.t %s, %s, %s, %s, %s", c.syntax, a.syntax, pos1.syntax, b.syntax, pos2.syntax)
	image = format("%s %s 11 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0x87)
	action = {
		tmp1 = a<pos1..pos1> & (~(b<pos2..pos2>));
		c = 0x00000000;
		c<0..0> = tmp1;
	}

op andt (c:reg_d,pos2:pos,pos1:pos,b:reg_d,a:reg_d)
   syntax = format("and.t %s,%s,%s,%s,%s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
   image = format("%s%s00%s%s%s10000111",c.image,pos2.image,pos1.image,b.image,a.image)
   action =	{
		TMP_1 = 0;
		TMP_2 = 0;
		TMP_1<0..5> = pos1<0..5>;
		TMP_2<0..5> = pos2<0..5>;
		result = a<TMP_1..TMP_1> & b<TMP_2..TMP_2>;
		c = result;
		}
	otawa_sem = "SCRATCH(D(0));"	// !!SIMPLIFY!!

op and_nor_t (c:reg_d,a:reg_d,pos1:card(5),b:reg_d,pos2:card(5))
   syntax = format("and.nor.t %s,%s,%d,%s,%d",c.syntax,a.syntax,pos1,b.syntax,pos2)
   image = format("%s%5b10%5b%s%s01000111",c.image,pos2,pos1,b.image,a.image)
   action = 	{
		TMP_1 = coerce(card(32), pos1);
		TMP_2 = coerce(card(32), pos2);
		TMP_3<0..0> = a<TMP_1..TMP_1> | b<TMP_2..TMP_2>;
		TMP_3<0..0> = ~TMP_3<0..0>;
		TMP_3<0..0> = c<0..0> & TMP_3<0..0>;
		c = (c<31..1>::TMP_3<0..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

//nand instructions
op nand = nand_reg|nand_const|nand_t

op nand_reg(a:reg_d,b:reg_d,c:reg_d)
	syntax = format("nand %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x09, b.image, a.image, 0x0F)
	action = {
		c = ~(a & b);
	}

op nand_const(a:reg_d,c:reg_d,const:const9)
	syntax = format("nand %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x09, const.image, a.image, 0x8F)
	action = {
		zero_ext32(const, TMP_1, 9);
		c = ~(a & TMP_1);
	}
	
op nand_t(c:reg_d, a:reg_d, pos1:pos, b:reg_d, pos2:pos)
	syntax = format("nand.t %s, %s, %s, %s, %s", c.syntax, a.syntax, pos1.syntax, b.syntax, pos2.syntax)
	image = format("%s %s 00 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0x07)
	action = {
		tmp1 = ~(a<pos1..pos1> & b<pos2..pos2>);
		zero_ext32(tmp1, c, 1);
	}

// imask instructions
op imask = imask_1|imask_2|imask_3|imask_4

op imask_1 (c:reg_e, const:card(4), pos:card(5), width:card(5), foo:card(4))
   syntax = format("imask %s,#%d,#%d,#%d",c.syntax,const,pos,width)
   image = format("%s%5b01%5b%4b%4b10110111",c.image,pos,width,const,foo)
   action = 	{
		c<63..32> = (((2**width)-1)<<pos);
		c<31..0> = const<<pos;
		}
	otawa_sem = "SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op imask_2 (c:reg_e,const:card(4),d:reg_d,width:card(5),foo:card(4))
   syntax = format("imask %s,#%d,%s,#%d",c.syntax,const,d.syntax,width)
   image = format("%s%s001%5b%4b%4b11010111",c.image,d.image,width,const,foo)
   action = 	{
		c<63..32> = (((2**width)-1)<<(d<4..0>));
		c<31..0> = const<<(d<4..0>);
		}
	otawa_sem = "SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op imask_3 (c:reg_e,pos:card(5),b:reg_d,width:card(5),foo:card(4))
   syntax = format("imask %s,%s,#%d,#%d",c.syntax,b.syntax,pos,width)
   image = format("%s%5b01%5b%s%4b00110111",c.image,pos,width,b.image,foo)
   action = 	{
		c<63..32> = (((2**width)-1)<<pos);
		c<31..0> = (b<31..0>)<<pos;
		}
	otawa_sem = "SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op imask_4 (c:reg_e,b:reg_d,d:reg_d,width:card(5),foo:card(4))
   syntax = format("imask %s,%s,%s,#%d",c.syntax,b.syntax,d.syntax,width)
   image = format("%s%s001%5b%s%4b01010111",c.image,d.image,width,b.image,foo)
   action = 	{
		c<63..32> = (((2**width)-1)<<(d<4..0>));
		c<31..0> = (b<31..0>)<<(d<4..0>);
		}
	otawa_sem = "SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"


// dextr instructions
op dextr = dextr_reg|dextr_pos

op dextr_reg (c:reg_d,a:reg_d,b:reg_d,d:reg_d,foo:card(5))
   syntax = format("dextr %s,%s,%s,%s",c.syntax,a.syntax,b.syntax,d.syntax)
   image = format("%s%s100%5b%s%s00010111",c.image,d.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(card(64), a) << 32;
		result64 = result64 + b;
		result64 = result64 << d<4..0>;
		c = result64<63..32>;
		}
	otawa_sem = "SCRATCH(D(0));"

op dextr_pos (c:reg_d,a:reg_d,b:reg_d,pos:card(5),foo:card(5))
   syntax = format("dextr %s,%s,%s,%d",c.syntax,a.syntax,b.syntax,pos)
   image = format("%s%5b00%5b%s%s01110111",c.image,pos,foo,b.image,a.image)
   action = 	{
		TMP_1 = pos;
		result64 = coerce(card(64), a) << 32;
		result64 = result64 + b;
		result64 = result64 << TMP_1;
		c = result64<63..32>;
		}
	otawa_sem = "SCRATCH(D(0));"


// div instructions
op div = dvadj|dvinit|dvstep|divs|divu

op divs(c:reg_e, a:reg_d, b:reg_d)
	syntax = format("div %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 01 %s %s %8b", c.image, 0x20, b.image, a.image, 0x4B)
	action = {
		dividende = a;
		diviseur = b;
		if(diviseur == 0) then 
			if(dividende >= 0) then
				quotient = 0x7FFFFFFF;
				reste = 0x00000000;
			else
				quotient = 0x80000000;
				reste = 0x00000000;
			endif;
		else
			if((diviseur == 0xFFFFFFFF) && (dividende == 0x80000000)) then 
				quotient = 0x7FFFFFFF;
				reste = 0x00000000;
			else
				reste = dividende % diviseur;
				quotient = (dividende - reste)/diviseur;
			endif;
		endif;
		c<31..0> = quotient;
		c<63..32> = reste;		
		if((b==0) || ((b==0xFFFFFFFF) && (a == 0x80000000))) then VFLAG = 1; else VFLAG = 0; endif;
		stickyOverflow();	
		AVFLAG = 0;
	}

op divu(c:reg_e, a:reg_d, b:reg_d)
	syntax = format("div.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 01 %s %s %8b", c.image, 0x21, b.image, a.image, 0x4B)
	action = {
		dividende = a;
		diviseur = b;
		if(diviseur==0) then
			quotient = 0xFFFFFFFF;
			reste = 0x00000000;
		else
			reste = dividende % diviseur;
			quotient = (dividende - reste)/diviseur;
		endif;
		c<31..0> = quotient;
		c<63..32> = reste;
		if(b==0)then VFLAG=1; else VFLAG = 0; endif;
		stickyOverflow();
		AVFLAG = 0;
	}

op dvadj (c:reg_e,d:reg_e,b:reg_d,foo1:card(2),foo2:card(4))
   syntax = format("dvadj %s,%s,%s",c.syntax,d.syntax,b.syntax)
   image = format("%s%s1101%2b00%s%4b01101011",c.image,d.image,foo1,b.image,foo2)
   action =  	{
		abso(d<63..32>,TMP_1);
		abso(b,TMP_2);
		if ( (TMP_1 == TMP_2) && (d<63..63> == 0b1) )
		then
			if (d<31..31> == 0b1)
			then
				c<63..32> = 0x0000000000000000;
				c<31..0> = d<31..0>;
			else
				c<63..32> = 0x0000000000000000;
				c<31..0> = d<31..0>+1;
			endif;
		else
			if (d<31..31> == 0b1)
			then
				c<63..32> = d<63..32>;
				c<31..0> = d<31..0>+0b1;
			else
				c = d;
			endif;
		endif;
	}
	otawa_sem = "SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvinit = dvinit_|dvinit_bu|dvinit_b|dvinit_h|dvinit_hu|dvinit_u

op dvinit_bu (c:reg_e,b:reg_d,a:reg_d,foo:card(2))
   syntax = format ("dvinit.bu %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01001010%2b00%s%s01001011",c.image,foo,b.image,a.image)
   action = 	{
		c<63..24> = (0x00::a);
		c<23..0> = 0;
		abso(c<63..32>,TMP_1);
		abso(b,TMP_2);
		if ( (TMP_1 >= TMP_2) || (b == 0) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		AVFLAG = 0;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvinit_(c:reg_e,b:reg_d,a:reg_d,foo:card(2))
   syntax = format ("dvinit %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00011010%2b00%s%s01001011",c.image,foo,b.image,a.image)
   action = 	{
		c = coerce(int(64), a);
		if ( (b == 0) || ( (b == 0xFFFFFFFF) && (a == 0x80000000) ) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		AVFLAG = 0;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvinit_b(c:reg_e,b:reg_d,a:reg_d,foo:card(2))
   syntax = format ("dvinit.b %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01011010%2b00%s%s01001011",c.image,foo,b.image,a.image)
   action = 	{
		c<63..32> = a;
		if (a<31..31> == 1)
		then
			c<31..24> = 0xFF;
		else
			c<31..24> = 0x00;
		endif;
		TMP_1 = !(a<31..31> == b<31..31>);
		abso(a,TMP_2);
		TMP_3 = TMP_2 & 0x7F;
		TMP_2 = TMP_2 >> 7;
		abso(b,TMP_4);
		if (TMP_1)
		then
			c<23..0> = 0xFFFFFF;
		else
			c<23..0> = 0x000000;
		endif;
		if (TMP_1 && TMP_4)
		then
			if ( ( (TMP_2 == TMP_4) && (TMP_3 >= TMP_4) ) || (TMP_2 > TMP_4) )
			then
				VFLAG = 1;
			else
				VFLAG = 0;
			endif;
		else
			if (TMP_2 >= TMP_4)
			then
				VFLAG = 1;
			else
				VFLAG = 0;
			endif;
		endif;
		if ( (b == 0) || ( (b == 0xFFFFFFFF) && (a == 0x80000000) ) )
		then
			VFLAG = 1;
		endif;
		stickyOverflow();
		AVFLAG = 0;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvinit_h(c:reg_e,b:reg_d,a:reg_d,foo:card(2))
   syntax = format ("dvinit.h %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00111010%2b00%s%s01001011",c.image,foo,b.image,a.image)
   action = 	{
		c<63..32> = a;
		if (a<31..31> == 1)
		then
			c<31..16> = 0xFFFF;
		else
			c<31..16> = 0x0000;
		endif;
		TMP_1 = !(a<31..31> == b<31..31>);
		abso(a,TMP_2);
		TMP_3 = TMP_2 & 0x7FFFF;
		TMP_2 = TMP_2 >>15;
		abso(b,TMP_4);
		if (TMP_1)
		then
			c<15..0> = 0xFFFF;
		else
			c<15..0> = 0x0000;
		endif;
		if (TMP_1 && TMP_4)
		then
			if ( ( (TMP_2 == TMP_4) && (TMP_3 >= TMP_4) ) || (TMP_2 > TMP_4) )
			then
				VFLAG = 1;
			else
				VFLAG = 0;
			endif;
		else
			if (TMP_2 >= TMP_4)
			then
				VFLAG = 1;
			else
				VFLAG = 0;
			endif;
		endif;
		if ( (b == 0) || ( (b == 0xFFFFFFFF) && (a == 0x80000000) ) )
		then
			VFLAG = 1;
		endif;
		stickyOverflow();
		AVFLAG = 0;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvinit_hu (c:reg_e,b:reg_d,a:reg_d,foo:card(2))
   syntax = format ("dvinit.hu %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00101010%2b00%s%s01001011",c.image,foo,b.image,a.image)
   action = 	{
		c<63..16> = 0x0000::a;
		c<15..0> = 0;
		abso(c<63..32>,TMP_1);
		abso(b,TMP_2);
		if ( (TMP_1 >= TMP_2) || (b == 0) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		AVFLAG = 0;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvinit_u (c:reg_e,b:reg_d,a:reg_d,foo:card(2))
   syntax = format ("dvinit.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001010%2b00%s%s01001011",c.image,foo,b.image,a.image)
   action = 	{
		c<31..0> = a;
		c<63..32> = 0x00000000;
		if (b == 0)
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		AVFLAG = 0;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op dvstep = dvstep_ | dvstep_u

op dvstep_u (c:reg_e,d:reg_e,b:reg_d,foo1:card(2),foo2:card(4))
   syntax = format("dvstep.u %s,%s,%s",c.syntax,d.syntax,b.syntax)
   image = format("%s%s1110%2b00%s%4b01101011",c.image,d.image,foo1,b.image,foo2)
   action =	{
		TMP_1 = b;
		TMP_2 = d<31..0>;
		TMP_3 = d<63..32>;
		indice = 0;
		loop_dvstep_u;
		c<31..0> = TMP_3;
		c<63..32> = TMP_2;
		}
   loop_dvstep_u = {	if (indice <= 7)
			then
				TMP_3 = (TMP_3 << 1) | TMP_2<31..31>;
				TMP_2 = TMP_2 << 1;
				if ( (TMP_3-TMP_2) >= 0)
				then
					TMP_3 = (TMP_3-TMP_2);
				endif;
				TMP_2 = TMP_2|((TMP_3-TMP_2) >= 0);
				loop_dvstep_u;
			endif;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"


op dvstep_ (c:reg_e,d:reg_e,b:reg_d,foo1:card(2),foo2:card(4))
   syntax = format("dvstep %s,%s,%s",c.syntax,d.syntax,b.syntax)
   image = format("%s%s1111%2b00%s%4b01101011",c.image,d.image,foo1,b.image,foo2)
   action =	{
		TMP_1 = d<63..63>;
		TMP_2 = b<31..31>;
		TMP_3 = (TMP_2 != TMP_1);
		if (TMP_3)
		then
			TMP_2 = b;
		else
			TMP_2 = 0 - b;
		endif;
		TMP_4 = d<31..0>;
		TMP_5 = d<63..32>;
		indice = 0;
		loop_dvstep_;
		c<31..0> = TMP_5;
		c<63..31> = TMP_4;
		}
   loop_dvstep_ = {	if (indice <= 7)
			then
				TMP_5 = (TMP_5 << 1) | TMP_4<31..31>;
				TMP_4 = TMP_4 << 1;
				if ( ( ((TMP_5+TMP_2) < 0) && (TMP_1 == 1) ) || ( ((TMP_5+TMP_2) >= 0) && (TMP_1 == 0) ) )
				then
					TMP_5 = (TMP_5+TMP_2);
				endif;
				if (TMP_4 | ( (((TMP_5+TMP_2) < 0) && (TMP_1 == 1)) || (((TMP_5+TMP_2) >= 0) && (TMP_1 == 0)) ))
				then
					TMP_4 = !(TMP_3);
				else
					TMP_4 = TMP_3;
				endif;
				loop_dvstep_;
			endif;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"


// eq instructions
op eq = eq_reg|eq_const9|eqanyb_reg|eqanyb_const|eqanyh_reg|eqanyh_const | eq_a | eq_w | eq_h | eq_b | eqz_a

op eqz_a(c:reg_d, a:reg_a)
	syntax = format("eqz.a %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x48, a.image, 0x01)
	action = {
		c=0x00000000;
		if(a==0) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}

op eq_w(a:reg_d,b:reg_d,c:reg_d)
	syntax = format("eq.w %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x90, b.image, a.image, 0x0B)
	action = {
		if(a==b) then
			c=0xFFFFFFFF;
		else
			c=0x00000000;
		endif;
	}
	
op eq_h(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("eq.h %s, %s, %s", c, a, b)
	image = format("%s %8b XX XX %s %s %08b", c, 0x70, b, a, 0x0B)
	action = {
		c<31..16>	= equals(half1(a), half1(b));
		c<15..0>	= equals(half0(a), half0(b));
	}
	
op eq_b(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("eq.b %s, %s, %s", c, a, b)
	image = format("%s %8b XX XX %s %s %08b", c, 0x50, b, a, 0x0B)
	action = {
		c<31..24>	= equals(byte3(a), byte3(b));
		c<23..16>	= equals(byte2(a), byte2(b));
		c<15..8>	= equals(byte1(a), byte1(b));
		c<7..0>		= equals(byte0(a), byte0(b));
	}

op eq_a(c: reg_d, a: reg_a, b: reg_a, foo: card(4))
	syntax	= format("eq.a %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image	= format("%s01000000%4d%s%s00000001", c.image, foo, b.image, a.image)
	action	= { c = a == b; }
	otawa_sem = "SCRATCH(D(0));"

op eq_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("eq %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00010000%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (a == b)
		then
			c = 1;
		else
			c = 0;
		endif;
	}
	otawa_sem = "SCRATCH(D(0));"

op eq_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("eq %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0010000%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		if (a == TMP_1)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op eqanyb_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("eqany.b %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01010110%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if ( 	(a<31..24> == b<31..24>) ||
			(a<23..16> == b<23..16>) ||
			(a<15..8> == b<15..8>) ||
			(a<7..0> == b<7..0>) )
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op eqanyb_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("eqany.b %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s1010110%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		if ( 	(a<31..24> == TMP_1<31..24>) ||
			(a<23..16> == TMP_1<23..16>) ||
			(a<15..8> == TMP_1<15..8>) ||
			(a<7..0> == TMP_1<7..0>) )
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op eqanyh_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("eqany.h %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01110110%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if ( 	(a<31..16> == b<31..16>) ||
			(a<15..0> == b<15..0>) )
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op eqanyh_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("eqany.h %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s1110110%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		if ( 	(a<31..16> == TMP_1<31..16>) ||
			(a<15..0> == TMP_1<15..0>) )
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op extr = extr_pos|extr_u_reg|extr_u_width|extr_u_pos|extr_reg|extr_width

op extr_reg (c:reg_d,a:reg_d,d:reg_e,foo:card(9))
   syntax = format("extr %s,%s,%s",c.syntax,a.syntax,d.syntax)
   image = format("%s%s010%9b%s00010111",c.image,d.image,foo,a.image)
   action = 	{
		TMP_1<4..0> = d<36..32>;
		TMP_1<31..5> = 0x0000000;
		TMP_2<4..0> = d<4..0>;
		TMP_2<31..5> = 0x0000000;
		TMP_3 = a>>TMP_2;
		c = coerce(int(32),TMP_3<(TMP_1-1)..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op extr_width (c:reg_d,d:reg_d,a:reg_d,width:width5,foo:card(4))
   syntax = format("extr %s,%s,%s,%s",c.syntax,a.syntax,d.syntax,width.syntax)
   image = format("%s%s010%s%4b%s01010111",c.image,d.image,width.image,foo,a.image)
   action = 	{
		TMP_1<4..0> = width<4..0>;
		TMP_1<31..5> = 0x0000000;
		TMP_2<4..0> = d<4..0>;
		TMP_2<31..5> = 0x0000000;
		TMP_3 = a>>TMP_2;
		c = coerce(int(32),TMP_3<(TMP_1-1)..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op extr_pos (c:reg_d,a:reg_d,pos:card(5),width:width5,foo:card(4))
   syntax = format("extr %s,%s,%d,%s",c.syntax,a.syntax,pos,width.syntax)
   image = format("%s%5b10%s%4b%s00110111",c.image,pos,width.image,foo,a.image)
   action = 	{
		TMP_1<4..0> = pos<4..0>;
		TMP_1<31..5> = 0x0000000;
		TMP_2<4..0> = width<4..0>;
		TMP_2<31..5> = 0x0000000;
		TMP_3 = a >> TMP_1;
		c = coerce(int(32),TMP_3<(TMP_2-1)..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op extr_u_reg (c:reg_d,a:reg_d,d:reg_e,foo:card(9))
   syntax = format("extr.u %s,%s,%s",c.syntax,a.syntax,d.syntax)
   image = format("%s%s011%9b%s00010111",c.image,d.image,foo,a.image)
   action = 	{
		TMP_1<4..0> = d<36..32>;
		TMP_1<31..5> = 0x0000000;
		TMP_2<4..0> = d<4..0>;
		TMP_2<31..5> = 0x0000000;
		TMP_3 = a>>TMP_2;
		c = coerce(card(32),TMP_3<(TMP_1-1)..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op extr_u_width (c:reg_d,d:reg_d,a:reg_d,width:width5,foo:card(4))
   syntax = format("extr.u %s,%s,%s,%s",c.syntax,a.syntax,d.syntax,width.syntax)
   image = format("%s%s011%s%4b%s01010111",c.image,d.image,width.image,foo,a.image)
   action = 	{
		TMP_1<4..0> = width<4..0>;
		TMP_1<31..5> = 0x0000000;
		TMP_2<4..0> = d<4..0>;
		TMP_2<31..5> = 0x0000000;
		TMP_3 = a>>TMP_2;
		c = coerce(card(32),TMP_3<(TMP_1-1)..0>);
		}
	otawa_sem = "SCRATCH(D(0));"

op extr_u_pos (c:reg_d,a:reg_d,pos:card(5),width:card(5),foo:card(4))
   syntax = format("extr.u %s,%s,%d,%d",c.syntax,a.syntax,pos,width)
   image = format("%s%5b11%5b%4b%s00110111",c.image,pos,width,foo,a.image)
   action = 	{
		TMP_1<4..0> = pos<4..0>;
		TMP_1<31..5> = 0x0000000;
		TMP_2<4..0> = width<4..0>;
		TMP_2<31..5> = 0x0000000;
		TMP_3 = a >> TMP_1;
		c = coerce(card(32),TMP_3<(TMP_2-1)..0>);
		}
	otawa_sem = "SCRATCH(D(0));"


// ge instructions
op ge = ge_reg|ge_const9|ge_u_const9|gea|geu_reg



op ge_reg (c:reg_d,b:reg_d,a:reg_d,foo:card(4))
   syntax = format("ge %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00010100%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (a >= b)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op ge_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format ("ge %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format ("%s0010100%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		if (a >= TMP_1)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op gea (c:reg_d,b:reg_a,a:reg_a,foo:card(4))
   syntax = format("ge.a %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01000011%4b%s%s00000001",c.image,foo,b.image,a.image)
   action = 	{
		if (a >= b)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op geu_reg (c:reg_d,b:reg_d,a:reg_d,foo:card(4))
   syntax = format("ge.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00010101%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (a >= b)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op ge_u_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format ("ge.u %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format ("%s0010101%s%s10001011",c.image,const.image,a.image)
   action = {
   	if (a >= coerce(card(32),const))
		then
			c = 1;
		else
			c = 0;
		endif; }
	otawa_sem = "SCRATCH(D(0));"


// insert instruction
op insert = insert_reg|insert_width|insert_pos|insert_const4|insert_const4_width|insert_const4_pos

op insert_reg (c:reg_d,d:reg_e,b:reg_d,a:reg_d,foo:card(5))
   syntax = format("insert %s,%s,%s,%s",c.syntax,a.syntax,b.syntax,d.syntax)
   image = format ("%s%s000%5b%s%s00010111",c.image,d.image,foo,b.image,a.image)
   action = 	{
		TMP_1 = d<36..32>;
		TMP_2 = (2**TMP_1)-1;
		TMP_2 = TMP_2 << d<4..0>;
		if ( (a & (~TMP_2)) | ( (b<<d<4..0>) & TMP_1))
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op insert_width (c:reg_d,d:reg_d,b:reg_d,a:reg_d,width:width5)
    syntax = format ("insert %s,%s,%s,%s,%s",c.syntax,a.syntax,b.syntax,d.syntax,width.syntax)
    image = format ("%s%s000%s%s%s01010111",c.image,d.image,width.image,b.image,a.image)
    action = 	{
		TMP_1 = width;
		TMP_2 = (2**TMP_1)-1;
		TMP_2 = TMP_2 << d<4..0>;
		if ( (a & (~TMP_2)) | ( (b<<d<4..0>) & TMP_2))
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op insert_pos (c:reg_d,b:reg_d,a:reg_d,width:width5,pos1:pos)
    syntax = format ("insert %s,%s,%s,%s,%s",c.syntax,a.syntax,b.syntax,pos1.syntax,width.syntax)
    image = format("%s%5b00%s%s%s00110111",c.image,pos1.image,width.image,b.image,a.image)
    action = 	{
		TMP_1 = pos1;
		TMP_2 = width;
		TMP_3 = (2**TMP_2)-1;
		TMP_3 = TMP_3 << TMP_1;
		if ( (a & (~TMP_3)) | ( (b<<TMP_1) & TMP_3))
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op insert_const4 (c:reg_d,a:reg_d,d:reg_e,const:const4,foo:card(5))
   syntax = format ("insert %s,%s,%s,%s",c.syntax,a.syntax,const.syntax,d.syntax)
   image = format ("%s%s000%5b%4b%s10010111",c.image,d.image,foo,const.image,a.image)
   action = 	{
		zero_ext32(const,TMP_1,4);
		TMP_2 = d<36..32>;
		TMP_3 = (2**TMP_2)-1;
		TMP_3 = TMP_3 << d<4..0>;
		if ( (a & (~TMP_3)) | ( (TMP_1<<d<4..0>) & TMP_3))
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op insert_const4_width (c:reg_d,a:reg_d,d:reg_d,const:const4,width:width5)
   syntax = format ("insert %s,%s,%s,%s,%s",c.syntax,a.syntax,const.syntax,d.syntax,width.syntax)
   image = format ("%s%s000%s%s%s11010111",c.image,d.image,width.image,const.image,a.image)
   action = 	{
		zero_ext32(const,TMP_1,4);
		TMP_2 = width;
		TMP_3 = (2**TMP_2)-1;
		TMP_3 = TMP_3 << d<4..0>;
		if ( (a & (~TMP_3)) | ( (TMP_1<<d<4..0>) & TMP_3))
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op insert_const4_pos (c:reg_d,a:reg_d,const:const4,width:width5,pos1:pos)
   syntax =  format ("insert %s,%s,%s,%s,%s",c.syntax,a.syntax,const.syntax,pos1.syntax,width.syntax)
   image = format ("%s%5b00%s%4b%s10110111",c.image,pos1.image,width.image,const.image,a.image)
   action = 	{
		zero_ext32(const,TMP_1,4);
		TMP_2 = width;
		TMP_3 = pos1;
		TMP_4 = (2**TMP_2)-1;
		TMP_4 = TMP_4 << TMP_3;
		c = (a & (~TMP_4)) | ( (TMP_1<<TMP_3) & TMP_4);
		}
	otawa_sem = "SCRATCH(D(0));"

op ins_t (c:reg_d,pos1:pos,pos2:pos,a:reg_d,b:reg_d)
   syntax = format ("ins.t %s,%s,%s,%s,%s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
   image = format("%s%5b00%5b%s%s01100111",c.image,pos2.image,pos1.image,b.image,a.image)
   action = 	{
		TMP_1 = coerce(card(32), pos1);
		TMP_2 = coerce(card(32), pos2);
		//c = a<31..(TMP_1+1)>::b<TMP_2..TMP_2>::a<(TMP_1-1)..0>;
		c<(TMP_1-1)..0> = a<(TMP_1-1)..0>;
		c<TMP_1..TMP_1> = b<TMP_2..TMP_2>;
		c<31..(TMP_1+1)> = a<31..(TMP_1+1)>;
		}
	otawa_sem = "SCRATCH(D(0));"

op insn_t (c:reg_d,pos1:pos,pos2:pos,a:reg_d,b:reg_d)
   syntax = format ("insn.t %s,%s,%s,%s,%s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
   image = format("%s %s 01 %s %s %s %8b",c.image,pos2.image,pos1.image,b.image,a.image,0x67)
   action = 	{
		TMP_1 = coerce(card(32), pos1);
		TMP_2 = coerce(card(32), pos2);
		//c = a<31..(TMP_1+1)>::b<TMP_2..TMP_2>::a<(TMP_1-1)..0>;
		c<(TMP_1-1)..0> = a<(TMP_1-1)..0>;
		c<TMP_1..TMP_1> = ~b<TMP_2..TMP_2>;
		c<31..(TMP_1+1)> = a<31..(TMP_1+1)>;
		}

// mov instructions
op mov = mov_reg|mov_const32|mov_const64|mov_reg64|mov_rr64|mov_a|mov_aa|mov_d|movh|mov_u

op mov_reg (c:reg_d, b:reg_d, foo1:card(4), foo2:card(4))
    syntax = format("mov %s,%s",c.syntax,b.syntax)
    image = format("%s00011111%4b%s%4b00001011",c.image,foo1,b.image,foo2)
    action = 	{
		c = b;
		}
	otawa_sem = "SETI(D(0), D(1));"

op mov_const32 (c:reg_d, const:const16, foo:card(4))
  syntax = format("mov %s,%s",c.syntax,const.syntax)
  image = format("%s%s%4b00111011",c.image,const.image,foo)
  action = 	{
  	sign_ext16to32(const, TMP_1);
  	c = TMP_1;
  }
	otawa_sem = "SETI(D(0), S16(1));"
	
op mov_const64 (c:reg_e, const:const16)
  syntax = format("mov %s,%s",c.syntax,const.syntax)
  image = format("%s%s XXXX %8b",c.image,const.image,0xFB)
  action = 	{
  	sign_ext16to64(const, TMP_1);
  	c = TMP_1;
  }
  
 
op mov_reg64 (c:reg_e, b:reg_d)
    syntax = format("mov %s,%s",c.syntax,b.syntax)
    image = format("%s %8b XX XX %s XXXX %8b",c.image,0x80,b.image,0x0B)
    action = 	{
    	sign_ext32to64(b, TMP_1);
			c = TMP_1;
		}
		
op mov_rr64 (c:reg_e,a:reg_d,b:reg_d)
	syntax = format("mov %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x81, b.image, a.image, 0x0B)
	action = {
		c = a :: b;
	}

op  mov_a (c:reg_a, b:reg_d, foo1:card(4), foo2:card(4))
    syntax = format("mov.a %s,%s",c.syntax,b.syntax)
    image = format("%s01100011%4b%s%4b00000001",c.image,foo1,b.image,foo2)
    action = { c = b; }
	otawa_sem = "SET(A(0), D(1));"

op  mov_aa (c:reg_a, b:reg_a, foo1:card(4), foo2:card(4))
    syntax = format("mov.aa %s,%s",c.syntax,b.syntax)
    image = format("%s00000000%4b%s%4b00000001",c.image,foo1,b.image,foo2)
    action = { c = b; }
    otawa_sem = "SET(A(0), A(1));"

op  mov_d (c:reg_d, b:reg_a, foo1:card(4), foo2:card(4))
    syntax = format("mov.d %s,%s",c.syntax,b.syntax)
    image = format("%s01001100%4b%s%4b00000001",c.image,foo1,b.image,foo2)
    action = { c = b; }
    otawa_sem = "SET(D(0), A(1));"

op mov_u (c:reg_d, const:card(16), foo:card(4))
  syntax = format("mov.u %s,%d",c.syntax,const)
  image = format("%s%16b%4b10111011",c.image,const,foo)
  action = 	{
		TMP_1 = coerce(card(32),const);
		c = TMP_1;
		}
	otawa_sem = "SETI(D(0), U16(1));"


// movh instruction
op movh = movh_const16|movh_a

op movh_const16 (c:reg_d, const:card(16), foo:card(4))
  syntax = format("movh %s,%d",c.syntax,const)
  image = format("%s%16b%4b01111011",c.image,const,foo)
  action = 	{
		c<31..16> = const<15..0>;
		c<15..0> = 0x0000;
		}
	otawa_sem = "SETI(T1, U16(1)); SETI(T2, 16); SHL(D(0), T1, T2);"

op movh_a (c:reg_a, const:card(16))
  syntax = format("movh.a %s,#%d",c.syntax,const)
  image = format("%s%16bXXXX%8b",c.image,const,0x91)
  action = 	{
		c<31..16> = const<15..0>;
		c<15..0> = 0;
		}
	


// mul instruction
op mul = mul_reg|mul_e_reg|mul_const9|mul_e_const9|mul_u|mul_u_const9|muls_reg|muls_const9|muls_u_reg|muls_u_const|mulh_ll|mulh_lu|mulh_ul|mulh_uu|mul_q|mulmh|mulrh|mulrq

op mulmh = mulmh_1 |mulmh_2|mulmh_3|mulmh_4

op mulmh_1(c:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulm.h %s, %s, %sLL, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x1E, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64=(TMP_0+TMP_1)<<16;
		c=result64;
		VFLAG=0;
		AVFLAG=0;
	}
	
op mulmh_2(c:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulm.h %s, %s, %sLU, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x1D, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64=(TMP_0+TMP_1)<<16;
		c=result64;
		VFLAG=0;
		AVFLAG=0;
	}
	
op mulmh_3(c:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulm.h %s, %s, %sUL, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x1C, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64=(TMP_0+TMP_1)<<16;
		c=result64;
		VFLAG=0;
		AVFLAG=0;
	}
	
op mulmh_4(c:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulm.h %s, %s, %sUU, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x1F, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64=(TMP_0+TMP_1)<<16;
		c=result64;
		VFLAG=0;
		AVFLAG=0;
	}
	
op mulrh = mulrh_1 |mulrh_2|mulrh_3|mulrh_4

op mulrh_1(c:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulr.h %s, %s, %sLL, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x0E, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=(((a<31..16>*b<15..0>)<<n)+0x8000);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=(((a<15..0>*b<15..0>)<<n)+0x8000);
		endif;
		c=TMP_1<31..16> :: TMP_0<31..16>;
		VFLAG=0;
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op mulrh_2(c:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulr.h %s, %s, %sLU, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x0D, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=(((a<31..16>*b<15..0>)<<n)+0x8000);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=(((a<15..0>*b<31..16>)<<n)+0x8000);
		endif;
		c=TMP_1<31..16> :: TMP_0<31..16>;
		VFLAG=0;
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op mulrh_3(c:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulr.h %s, %s, %sUL, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x0C, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=(((a<31..16>*b<31..16>)<<n)+0x8000);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=(((a<15..0>*b<15..0>)<<n)+0x8000);
		endif;
		c=TMP_1<31..16> :: TMP_0<31..16>;
		VFLAG=0;
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}
	
op mulrh_4(c:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("mulr.h %s, %s, %sUU, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x0F, n, b.image, a.image, 0xB3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=(((a<15..0>*b<31..16>)<<n)+0x8000);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=(((a<31..16>*b<31..16>)<<n)+0x8000);
		endif;
		c=TMP_1<31..16> :: TMP_0<31..16>;
		VFLAG=0;
		advancedOverflow_h64(TMP_1,TMP_2);
		stickyAdvancedOverflow();
	}

op mulrq = mulrq_1 | mulrq_2

op mulrq_1(c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mulr.q %s, %sL, %sL, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x07, n, b.image, a.image, 0x93)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=(((a<15..0>*b<15..0>)<<n)+0x8000);
		endif;
		c = TMP_1<31..16> :: 0x0000;
		VFLAG=0;
		advancedOverflow(TMP_1);
		stickyAdvancedOverflow();
	}
	
op mulrq_2(c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mulr.q %s, %sU, %sU, %d",c.syntax, a.syntax, b.syntax, n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x06, n, b.image, a.image, 0x93)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=(((a<31..16>*b<31..16>)<<n)+0x8000);
		endif;
		c = TMP_1<31..16> :: 0x0000;
		VFLAG=0;
		advancedOverflow(TMP_1);
		stickyAdvancedOverflow();
	}

op mul_q = mul_q1 | mul_q2 | mul_q3 | mul_q4 | mul_q5 | mul_q6 | mul_q7 | mul_q8

op mul_q1 (c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %s, %s, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x02, n,b.image, a.image, 0x93)
	action = {
		result64 = ((a * b)<<n)>>32;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}
	
op mul_q2 (c:reg_e,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %s, %s, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x1B, n,b.image, a.image, 0x93)
	action = {
		result64 = (a * b) << n;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
	}
	
op mul_q3 (c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %s, %sL, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x01, n,b.image, a.image, 0x93)
	action = {
		result64 = ((a * b<15..0>)<<n)>>16;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}
	
op mul_q4 (c:reg_e,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %s, %sL, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x19, n,b.image, a.image, 0x93)
	action = {
		result64 = (a * b<15..0>)<<n;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
	}
	
op mul_q5 (c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %s, %sU, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x00, n,b.image, a.image, 0x93)
	action = {
		result64 = ((a * b<31..16>)<<n)>>16;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}
	
op mul_q6 (c:reg_e,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %s, %sU, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x18, n,b.image, a.image, 0x93)
	action = {
		result64 = (a * b<31..16>)<<n;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
	}
	
op mul_q7 (c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %sL, %sL, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x05, n,b.image, a.image, 0x93)
	action = {
		if ((a<15..0> == 0x8000)&&(b<15..0>==0x8000)&&(n==1)) then tmp1=1; else tmp1=0; endif;
		if (tmp1==1) then result64=0x7FFFFFFF; else result64=(a<15..0> * b<15..0>)<<n; endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}
	
op mul_q8 (c:reg_d,b:reg_d,a:reg_d,n:card(2))
	syntax = format("mul.q %s, %sU, %sU, %d",c.syntax, a.syntax, b.syntax,n)
	image = format("%s %10b %2b %s %s %8b",c.image, 0x04, n,b.image, a.image, 0x93)
	action = {
		if ((a<31..16> == 0x8000)&&(b<31..16>==0x8000)&&(n==1)) then tmp1=1; else tmp1=0; endif;
		if (tmp1==1) then result64=0x7FFFFFFF; else result64=(a<31..16> * b<31..16>)<<n; endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}


op mul_reg (c:reg_d,b:reg_d,a:reg_d)
   syntax = format("mul %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s000000001010%s%s01110011",c.image,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)*coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mul_e_reg (c:reg_e,b:reg_d,a:reg_d)
   syntax = format("mul %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s000001101010%s%s01110011",c.image,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)*coerce(int(64),b);
		VFLAG = 0;
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mul_const9 (c:reg_d,const:const9,a:reg_d)
   syntax = format("mul %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000001%9b%s01010011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),a)*coerce(int(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mul_e_const9 (c:reg_e,const:const9,a:reg_d)
   syntax = format("mul %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000011%9b%s01010011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),a)*coerce(int(64),TMP_1);
		VFLAG = 0;
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op muls_reg (c:reg_d,b:reg_d,a:reg_d)
   syntax = format("muls %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s000010001010%s%s01110011",c.image,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)*coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op muls_u_reg (c:reg_d,b:reg_d,a:reg_d)
   syntax = format("muls.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s%12b%s%s%8b",c.image,0x88,b.image,a.image,0x73)
   action = 	{
		result64 = coerce(card(64),a)*coerce(card(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}

op muls_const9 (c:reg_d,const:const9,a:reg_d)
   syntax = format("muls %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000101%9b%s01010011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),a)*coerce(int(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op muls_u_const (c:reg_d,const:const9,a:reg_d)
   syntax = format("muls.u %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s%7b%s%s%8b",c.image,0x04,const.image,a.image,0x53)
   action = 	{
		zero_ext32(const,TMP_1,9);
		result64 = coerce(card(64),a)*coerce(card(64),TMP_1);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}

op mulh_ll (c:reg_e,n:card(2),b:reg_d,a:reg_d)
   syntax = format("mul.h %s,%s,%s LL,%d",c.syntax,a.syntax,b.syntax,n)
   image = format("%s0000011010%2b%s%s10110011",c.image,n,b.image,a.image)
   action =	{
		if ( (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n == 1) )
		then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16> * b<15..0>);
			TMP_1 = TMP_1 << n;
		endif;
		if ( (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n == 1) )
		then
			TMP_2 = 0x7FFFFFFF;
		else
			TMP_2 = (a<15..0> * b<15..0>);
			TMP_2 = TMP_2 << n;
		endif;
		VFLAG = 0;
		advancedOverflow(TMP_1);
		if (!AVFLAG)
		then
			advancedOverflow(TMP_2);
		endif;
		stickyAdvancedOverflow();
		c = TMP_1 << 32;
		c = c + TMP_2;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mulh_lu (c:reg_e,n:card(2),b:reg_d,a:reg_d)
   syntax = format("mul.h %s,%s,%s LU,%d",c.syntax,a.syntax,b.syntax,n)
   image = format("%s0000011001%2b%s%s10110011",c.image,n,b.image,a.image)
   action =	{
		if ( (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n == 1) )
		then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16> * b<15..0>);
			TMP_1 = TMP_1 << n;
		endif;
		if ( (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n == 1) )
		then
			TMP_2 = 0x7FFFFFFF;
		else
			TMP_2 = (a<15..0> * b<31..16>);
			TMP_2 = TMP_2 << n;
		endif;
		VFLAG = 0;
		advancedOverflow(TMP_1);
		if (!AVFLAG)
		then
			advancedOverflow(TMP_2);
		endif;
		stickyAdvancedOverflow();
		c = TMP_1 << 32;
		c = c + TMP_2;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mulh_ul (c:reg_e,n:card(2),b:reg_d,a:reg_d)
   syntax = format("mul.h %s,%s,%s UL,%d",c.syntax,a.syntax,b.syntax,n)
   image = format("%s0000011000%2b%s%s10110011",c.image,n,b.image,a.image)
   action =	{
		if ( (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n == 1) )
		then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16> * b<31..16>);
			TMP_1 = TMP_1 << n;
		endif;
		if ( (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n == 1) )
		then
			TMP_2 = 0x7FFFFFFF;
		else
			TMP_2 = (a<15..0> * b<15..0>);
			TMP_2 = TMP_2 << n;
		endif;
		VFLAG = 0;
		advancedOverflow(TMP_1);
		if (!AVFLAG)
		then
			advancedOverflow(TMP_2);
		endif;
		stickyAdvancedOverflow();
		c = TMP_1 << 32;
		c = c + TMP_2;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mulh_uu (c:reg_e,n:card(2),b:reg_d,a:reg_d)
   syntax = format("mul.h %s,%s,%s UU,%d",c.syntax,a.syntax,b.syntax,n)
   image = format("%s0000011011%2b%s%s10110011",c.image,n,b.image,a.image)
   action =	{
		if ( (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n == 1) )
		then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0> * b<31..16>);
			TMP_1 = TMP_1 << n;
		endif;
		if ( (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n == 1) )
		then
			TMP_2 = 0x7FFFFFFF;
		else
			TMP_2 = (a<31..16> * b<31..16>);
			TMP_2 = TMP_2 << n;
		endif;
		VFLAG = 0;
		advancedOverflow(TMP_1);
		if (!AVFLAG)
		then
			advancedOverflow(TMP_2);
		endif;
		stickyAdvancedOverflow();
		c = TMP_1 << 32;
		c = c + TMP_2;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mul_u (c:reg_e,b:reg_d,a:reg_d)
   syntax = format("mul.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s000001101000%s%s01110011",c.image,b.image,a.image)
   action = 	{
		result64 = coerce(card(64),a)*coerce(card(64),b);
		VFLAG = 0;
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"

op mul_u_const9 (c:reg_e,const:card(9),a:reg_d)
   syntax = format("mul.u %s,%s,%d",c.syntax,a.syntax,const)
   image = format("%s0000010%9b%s01010011",c.image,const,a.image)
   action = 	{
		TMP_1 = coerce(card(32),const);
		result64 = coerce(card(64),a)*coerce(card(64),TMP_1);
		VFLAG = 0;
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64<63..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0) * 2); SCRATCH(D(0) * 2 + 1);"


// ne instructions
op ne = ne_reg|ne_const9|neza | ne_a

op ne_a(c: reg_d, a: reg_d, b: reg_d, foo: card(4))
	syntax	= format("ne.a %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image	= format("%s01000001%4b%s%s00000001", c.image, foo, b.image, a.image)
	action	= { c = a != b; }
	otawa_sem = "SCRATCH(D(0));"

op ne_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("ne %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00010001%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (a != b)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op ne_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("ne %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0010001%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		if (a != TMP_1)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op neza (c:reg_d,a:reg_d,foo:card(8))
   syntax = format("nez.a %s,%s",c.syntax,a.syntax)
   image = format("%s01001001%8b%s00001011",c.image,foo,a.image)
   action = 	{
		if (a != 0)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

// or instructions
op or =   or_reg | or_const9
		| or_lt_reg | or_lt_const9
		| or_lt_u_reg | or_lt_u_const9
		| or_ge_reg | or_ge_const
		| or_ge_u_reg | or_ge_u_const
		| or_ne_reg | or_ne_const9
		| ort
		| or_eq_const | or_eq_reg 
		| or_and_t | or_andn_t | or_nor_t | or_or_t
		
op or_ge_const(a:reg_d,c:reg_d,const:const9)
	syntax = format("or.ge %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s 0101011 %s %s 10001011",c.image, const.image, a.image)
	action = {
		sign_ext9to32(const, TMP_1);
		if(coerce(int(32),a)>=TMP_1) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> | tmp1;
	}
	
op or_ge_reg(a:reg_d,c:reg_d,b:reg_d)
	syntax = format("or.ge %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s 00101011 XX XX %s %s 00001011",c.image, b.image, a.image)
	action = {
		if(coerce(int(32),a)>=coerce(int(32),b)) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> | tmp1;
	}
	
op or_ge_u_const(a:reg_d,c:reg_d,const:const9)
	syntax = format("or.ge.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s 0101100 %s %s 10001011",c.image, const.image, a.image)
	action = {
		TMP_1 = coerce(card(32), const);
		if(coerce(card(32),a)>=TMP_1) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> | tmp1;
	}
	
op or_ge_u_reg(a:reg_d,c:reg_d,b:reg_d)
	syntax = format("or.ge.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s 00101100 XX XX %s %s 00001011",c.image, b.image, a.image)
	action = {
		if(coerce(card(32),a)>=coerce(card(32),b)) then tmp1 = 1; else tmp1 = 0; endif;
		c<0..0> = c<0..0> | tmp1;
	}
		
op or_and_t(c:reg_d,a:reg_d,b:reg_d,pos1:pos,pos2:pos)
	syntax = format("or.and.t %s, %s, %s, %s, %s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
	image = format("%s %s 00 %s %s %s %8b",c.image, pos2.image, pos1.image, b.image, a.image, 0xC7)
	action = {
		c<0..0> = c<0..0> | (a<pos1..pos1> & b<pos2..pos2>);
	}
	
op or_andn_t(c:reg_d,a:reg_d,b:reg_d,pos1:pos,pos2:pos)
	syntax = format("or.andn.t %s, %s, %s, %s, %s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
	image = format("%s %s 11 %s %s %s %8b",c.image, pos2.image, pos1.image, b.image, a.image, 0xC7)
	action = {
		c<0..0> = c<0..0> | (a<pos1..pos1> & ~(b<pos2..pos2>));
	}
	
op or_nor_t(c:reg_d,a:reg_d,b:reg_d,pos1:pos,pos2:pos)
	syntax = format("or.nor.t %s, %s, %s, %s, %s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
	image = format("%s %s 10 %s %s %s %8b",c.image, pos2.image, pos1.image, b.image, a.image, 0xC7)
	action = {
		c<0..0> = c<0..0> | ~((a<pos1..pos1> | b<pos2..pos2>));
	}
	
op or_or_t(c:reg_d,a:reg_d,b:reg_d,pos1:pos,pos2:pos)
	syntax = format("or.or.t %s, %s, %s, %s, %s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
	image = format("%s %s 01 %s %s %s %8b",c.image, pos2.image, pos1.image, b.image, a.image, 0xC7)
	action = {
		c<0..0> = c<0..0> | (a<pos1..pos1> | b<pos2..pos2>);
	}

op or_eq_const(c: reg_d, a: reg_d, const9: int(9))
	syntax	= format("or.eq %s, %s, %d", c.syntax, a.syntax, const9)
	image	= format("%s0100111%9b%s10001011", c.image, const9, a.image)
	action	= { c<1..31> = c<0..30>; c<0..0> = c<0..0> | (a == const9); }
	otawa_sem = "SCRATCH(D(0));"

op or_eq_reg(c: reg_d, a: reg_d, b: reg_d, foo: card(4))
	syntax	= format("or.eq %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image	= format("%s00100111%4b%s%s00001011", c.image, foo, b.image, a.image)
	action	= { c<1..31> = c<0..30>; c<0..0> = c<0..0> | (a == b); }
	otawa_sem = "SCRATCH(D(0));"

op or_reg(c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("or %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001010%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = 	{
		c = (a | b);
		}
	otawa_sem = "SCRATCH(D(0));"

op or_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("or %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001010%s%s10001111",c.image,const.image,a.image)
   action = 	{
		zero_ext32(const,TMP_1,9);
		c = (a | TMP_1);
		}
	otawa_sem = "SCRATCH(D(0));"

op ort (c:reg_d,a:reg_d,pos1:pos,b:reg_d,pos2:pos)
   syntax = format("or.t %s,%s,%s,%s,%s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
   image = format("%s%s01%s%s%s10000111",c.image,pos2.image,pos1.image,b.image,a.image)
   action = 	{
		TMP_1 = 0;
		TMP_2 = 0;
		TMP_1<4..0> = pos1;
		TMP_2<4..0> = pos2;
		if (a<TMP_1..TMP_1> || b<TMP_2..TMP_2>)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op or_lt_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("or.lt %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00101001%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (coerce(int(32),a) < coerce(int(32),b))
		then
			TMP_1<0..0> = 1;
		else
			TMP_1<0..0> = 0;
		endif;
		TMP_1<0..0> = c<0..0> | TMP_1<0..0>;
		c = c<31..1>::TMP_1<0..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op or_lt_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("or.lt %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0101001%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const, TMP_2);
		if (coerce(int(32),a) < coerce(int(32),TMP_2))
		then
			TMP_1<0..0> = 1;
		else
			TMP_1<0..0> = 0;
		endif;
		TMP_1<0..0> = c<0..0> | TMP_1<0..0>;
		c = c<31..1>::TMP_1<0..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op or_lt_u_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("or.lt.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00101010%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (coerce(card(32),a) < coerce(card(32),b))
		then
			TMP_1<0..0> = 1;
		else
			TMP_1<0..0> = 0;
		endif;
		TMP_1<0..0> = c<0..0> | TMP_1<0..0>;
		c = c<31..1>::TMP_1<0..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op or_lt_u_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("or.lt.u %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0101010%s%s10001011",c.image,const.image,a.image)
   action = 	{
		TMP_2 = coerce(card(32),const);
		if (coerce(card(32),a) < TMP_2)
		then
			TMP_1<0..0> = 1;
		else
			TMP_1<0..0> = 0;
		endif;
		TMP_1<0..0> = c<0..0> | TMP_1<0..0>;
		c = c<31..1>::TMP_1<0..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op or_ne_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("or.ne %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00101000%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (a != b)
		then
			TMP_1<0..0> = 1;
		else
			TMP_1<0..0> = 0;
		endif;
		TMP_1<0..0> = TMP_1<0..0> | c<0..0>;
		c = c<31..1>::TMP_1<0..0>;
		}
	otawa_sem = "SCRATCH(D(0));"

op or_ne_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("or.ne %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0101000%s%s10001011",c.image,const.image,a.image)
   action = 	{
		TMP_2 = coerce(int(32), const);
		if (a != TMP_2)
		then
			TMP_1<0..0> = 1;
		else
			TMP_1<0..0> = 0;
		endif;
		TMP_1<0..0> = TMP_1<0..0> | c<0..0>;
		c = c<31..1>::TMP_1<0..0>;
		}
	otawa_sem = "SCRATCH(D(0));"


// nor instruction
op nor = nor_reg|nor_const|nort

op nor_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("nor %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001011%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = 	{
		c=~(a|b);
		}
	otawa_sem = "SCRATCH(D(0));"

op nor_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("nor %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001011%s%s10001111",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		c=~(a|TMP_1);
		}
	otawa_sem = "SCRATCH(D(0));"

op nort (c:reg_d,a:reg_d,pos1:pos,b:reg_d,pos2:pos)
   syntax = format("nor.t %s,%s,%s,%s,%s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
   image = format("%s%s10%s%s%s10000111",c.image,pos2.image,pos1.image,b.image,a.image)
   action = 	{
		TMP_1 = pos1;
		TMP_2 = pos2;
		c=~(a<TMP_1..TMP_1> | b<TMP_2..TMP_2>);
		}
	otawa_sem = "SCRATCH(D(0));"


// sel instruction
op sel = sel_reg|sel_const9|seln_reg|seln_const9

op sel_reg (a:reg_d,b:reg_d,c:reg_d,d:reg_d,foo:card(4))
   syntax = format("sel %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s0100%4b%s%s00101011",c.image,d.image,foo,b.image,a.image)
   action = 	{
		if (d != 0)
		then
			c = a;
		else
			c = b;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op sel_const9 (a:reg_d,const:const9,c:reg_d,d:reg_d)
   syntax = format("sel %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,const.syntax)
   image  = format("%s%s100%s%s10101011",c.image,d.image,const.image,a.image)
   action = 	{
		if (d != 0)
		then
			c = a;
		else
			sign_ext9to32(const,c);
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op seln_reg (a:reg_d,b:reg_d,c:reg_d,d:reg_d,foo:card(4))
   syntax = format("seln %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s0101%4b%s%s00101011",c.image,d.image,foo,b.image,a.image)
   action = 	{
		if (d == 0)
		then
			c = a;
		else
			c = b;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op seln_const9 (a:reg_d,const:const9,c:reg_d,d:reg_d)
   syntax = format("seln %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,const.syntax)
   image  = format("%s%s101%s%s10101011",c.image,d.image,const.image,a.image)
   action = 	{
		if (d == 0)
		then
			c = a;
		else
			sign_ext9to32(const,c);
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"


// sh instructions
op sh = sh_reg|sh_const9| sha | sh_eq | sh_ge |sh_h | sh_lt | sh_ne | sh_t

op sh_t = sh_and_t | sh_andn_t | sh_nand_t | sh_nor_t | sh_or_t | sh_orn_t | sh_xnor_t | sh_xor_t

op sh_and_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.and.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 00 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0x27)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = a<pos1..pos1> & b<pos2..pos2>;
	}
	
op sh_andn_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.andn.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 11 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0x27)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = a<pos1..pos1> & ~(b<pos2..pos2>);
	}
	
op sh_nand_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.nand.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 00 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0xA7)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = ~(a<pos1..pos1> & b<pos2..pos2>);
	}
	
op sh_nor_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.nor.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 10 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0x27)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = ~(a<pos1..pos1> | b<pos2..pos2>);
	}
	
op sh_or_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.or.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 01 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0x27)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = a<pos1..pos1> | b<pos2..pos2>;
	}
	
op sh_orn_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.orn.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 01 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0xA7)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = a<pos1..pos1> | ~(b<pos2..pos2>);
	}
	
op sh_xnor_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.xnor.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 10 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0xA7)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = ~(a<pos1..pos1> ^ b<pos2..pos2>);
	}
	
op sh_xor_t(c: reg_d, a: reg_d, b:reg_d, pos1:pos, pos2:pos)
	syntax = format("sh.xor.t %s, %s, %s, %s, %s", c.syntax, a.syntax, b.syntax, pos1.syntax, pos2.syntax)
	image = format("%s %s 11 %s %s %s %8b", c.image, pos2.image, pos1.image, b.image, a.image, 0xA7)
	action = {
		c<31..1> = c<30..0>;
		c<0..0> = a<pos1..pos1> ^ b<pos2..pos2>;
	}

op sh_h = sh_h_reg | sh_h_const

op sh_h_const(c: reg_d, a: reg_d, const:const9)
	syntax = format("sh.h %s, %s, %s",c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x40, const.image, a.image, 0x8F)
	action = {
		sign_ext5to32(const<4..0>, TMP_1);
		if(TMP_1>=0) then
			result_halfword1 = a<31..16> << TMP_1;
		else
			result_halfword1 = a<31..16> >> (0-TMP_1);
		endif;
		if(TMP_1>=0) then
			result_halfword0 = a<15..0> << TMP_1;
		else
			result_halfword0 = a<15..0> >> (0-TMP_1);
		endif;
		c = result_halfword1 :: result_halfword0;
	}
	
op sh_h_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax = format("sh.h %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b",c.image, 0x40, b.image, a.image, 0x0F)
	action = {
		sign_ext5to32(b<4..0>, TMP_1);
		if(TMP_1>=0) then
			result_halfword1 = a<31..16> << TMP_1;
		else
			result_halfword1 = a<31..16> >> (0-TMP_1);
		endif;
		if(TMP_1>=0) then
			result_halfword0 = a<15..0> << TMP_1;
		else
			result_halfword0 = a<15..0> >> (0-TMP_1);
		endif;
		c = result_halfword1 :: result_halfword0;
	}

op sh_ge = sh_ge_reg | sh_ge_const | sh_ge_u_reg | sh_ge_u_const

op sh_ge_const(c: reg_d, a: reg_d, const:const9)
	syntax = format("sh.ge %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x3B, const.image, a.image, 0x8B)
	action = {
		c<31..1> = c<30..0>;
		sign_ext9to32(const, TMP_1);
		if (a>=TMP_1) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_ge_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax = format("sh.ge %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x3B, b.image, a.image, 0x0B)
	action = {
		c<31..1> = c<30..0>;
		if (a>=b) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_ge_u_const(c: reg_d, a: reg_d, const:const9)
	syntax = format("sh.ge.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x3C, const.image, a.image, 0x8B)
	action = {
		c<31..1> = c<30..0>;
		if (coerce(card(32),a)>=coerce(card(32),const)) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_ge_u_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax = format("sh.ge.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x3C, b.image, a.image, 0x0B)
	action = {
		c<31..1> = c<30..0>;
		if (coerce(card(32),a)>=coerce(card(32),b)) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_lt = sh_lt_reg | sh_lt_const | sh_lt_u_reg | sh_lt_u_const

op sh_lt_const(c: reg_d, a: reg_d, const:const9)
	syntax = format("sh.lt %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x39, const.image, a.image, 0x8B)
	action = {
		c<31..1> = c<30..0>;
		sign_ext9to32(const, TMP_1);
		if (a<TMP_1) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_lt_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax = format("sh.lt %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x39, b.image, a.image, 0x0B)
	action = {
		c<31..1> = c<30..0>;
		if (a<b) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_lt_u_const(c: reg_d, a: reg_d, const:const9)
	syntax = format("sh.lt.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x3A, const.image, a.image, 0x8B)
	action = {
		c<31..1> = c<30..0>;
		if (coerce(card(32),a)<coerce(card(32),const)) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}
	
op sh_lt_u_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax = format("sh.lt.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x3A, b.image, a.image, 0x0B)
	action = {
		c<31..1> = c<30..0>;
		if (coerce(card(32),a)<coerce(card(32),b)) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}

op sh_eq = sh_eq_const | sh_eq_reg

op sh_eq_const(c: reg_d, a: reg_d, const:const9)
	syntax	= format("sh.eq %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image	= format("%s0110111%s%s10001011", c.image, const.image, a.image)
	action	= {
		sign_ext9to32(const, TMP_1);
		c<1..31> = c<0..30>;
		c<0..0> = (a == TMP_1);
	}
	otawa_sem = "SCRATCH(D(0));"
	
op sh_eq_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax	= format("sh.eq %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x37, b.image, a.image, 0x0B)
	action = {
		c<31..1> = c<30..0>;
		if(a==b) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}

op sh_ne = sh_ne_reg | sh_ne_const

op sh_ne_const(c: reg_d, a: reg_d, const:const9)
	syntax	= format("sh.ne %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image	= format("%s %7b %s %s %8b", c.image, 0x38, const.image, a.image, 0x8B)
	action	= {
		sign_ext9to32(const, TMP_1);
		c<31..1> = c<30..0>;
		c<0..0> = (a != TMP_1);
	}
	otawa_sem = "SCRATCH(D(0));"
	
op sh_ne_reg(c: reg_d, a: reg_d, b:reg_d)
	syntax	= format("sh.ne %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x38, b.image, a.image, 0x0B)
	action = {
		c<31..1> = c<30..0>;
		if(a!=b) then
			c<0..0> = 1;
		else
			c<0..0> = 0;
		endif;
	}

op sh_reg (c:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("sh %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000000%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = {
			if (b<5..0> >= 0) then 
				c = a << b<5..0>;
			else 
				c = a >> (-b<5..0>);
			endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op sh_const9 (c:reg_d, a:reg_d, const:const9)
   syntax = format("sh %s, %s, %s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000000%9b%s10001111",c.image,const.image,a.image)
   action = {
			if (const<5..0> >= 0) then 
				c = a << const<5..0>;
			else 
				c = a >> (-const<5..0>);
			endif;
	 }
	otawa_sem = "SCRATCH(D(0));"

op sha = sha_reg | sha_const9 | sha_h_reg | sha_h_const | shas_reg | shas_const

op shas_const (c:reg_d,a:reg_d,const:const9)
	syntax = format("shas %s, %s, %s",c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x02, const.image, a.image, 0x8F)
	action = {
		if (const<5..0> >= 0) then
			result64 = a << const<5..0>;
		else
			TMP_1 = 0 - const<5..0>;
			if (a<31..31>) then
				TMP_2 = (((1<<TMP_1)-1)<<(32-TMP_1));
			else
				TMP_2 = 0;
			endif;
			result64 = TMP_2 | (a >> TMP_1);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
	}

op shas_reg (c:reg_d,a:reg_d,b:reg_d)
	syntax = format("shas %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x02, b.image, a.image, 0x0F)
	action = {
		if (b<5..0> >= 0) then
			result64 = a << b<5..0>;
		else
			TMP_1 = 0 - b<5..0>;
			if (a<31..31>) then
				TMP_2 = (((1<<TMP_1)-1)<<(32-TMP_1));
			else
				TMP_2 = 0;
			endif;
			result64 = TMP_2 | (a >> TMP_1);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
	}
	
op sha_h_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("sha.h %s, %s, %s",c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x41, const.image, a.image, 0x8F)
	action = {
		if(const<4..0> >= 0) then
			result_halfword0 = a<15..0> << const<4..0>;
			result_halfword1 = a<31..16> << const<4..0>;
		else
			TMP_1 = 0 - const<4..0>;
			if (a<31..31>) then 
				TMP_2 = (((1<<TMP_1)-1)<<(16-TMP_1));
			else
				TMP_2 = 0;
			endif;
			result_halfword0 = TMP_2 | (a<15..0> >> TMP_1);
			result_halfword1 = TMP_2 | (a<31..16> >> TMP_1);
		endif;
		c<15..0> = result_halfword0;
		c<31..16> = result_halfword1;
	}
	
op sha_h_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("sha.h %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x41, b.image, a.image, 0x0F)
	action = {
		if(b<4..0> >= 0) then
			result_halfword0 = a<15..0> << b<4..0>;
			result_halfword1 = a<31..16> << b<4..0>;
		else
			TMP_1 = 0 - b<4..0>;
			if (a<31..31>) then 
				TMP_2 = (((1<<TMP_1)-1)<<(16-TMP_1));
			else
				TMP_2 = 0;
			endif;
			result_halfword0 = TMP_2 | (a<15..0> >> TMP_1);
			result_halfword1 = TMP_2 | (a<31..16> >> TMP_1);
		endif;
		c<15..0> = result_halfword0;
		c<31..16> = result_halfword1;
	}

op sha_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("sha %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000001%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = 	{
		if (coerce(int(32),b<5..0>) >= 0)
		then
			TMP_3 = 32-b<5..0>;
			if ( b<5..0>) 
			then
				if (a<31..TMP_3> != 0) then
					CFLAG = 1;
				else 
					CFLAG = 0;
				endif;
			else
				CFLAG = 0;
			endif;
			result64 = coerce(int(64),a)<<(b<5..0>);
		else
			TMP_1 = 0-b<5..0>;
			if(a<31..31>)
			then
				TMP_2 = (((1<<TMP_1)-1)<<(32-TMP_1));
			else
				TMP_2 = 0;
			endif;
			result64 = (coerce(int(64),TMP_2) | (coerce(int(64),a)>>TMP_1));
			if (a<(TMP_1-1)..0> != 0)
			then
				CFLAG = 1;
			else
				CFLAG = 0;
			endif;
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op sha_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("sha %s, %s ,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0000001%s%s10001111",c.image,const.image,a.image)
   action = 	{
		TMP_4 = coerce(int(32),const);
		if (TMP_4 >= 0)
		then
			TMP_3 = 32-TMP_4<5..0>;
			if ( (TMP_4<5..0>) && (a<31..TMP_3> != 0) )
			then
				CFLAG = 1;
			else
				CFLAG = 0;
			endif;
			result64 = coerce(int(64),a)<<(TMP_4<5..0>);
		else
			TMP_1 = 0-TMP_4<5..0>;
			if(a<31..31>)
			then
				TMP_2 = (((1<<TMP_1)-1)<<(32-TMP_1));
			else
				TMP_2 = 0;
			endif;
			result64 = (coerce(int(64),TMP_2) | (coerce(int(64),a)>>TMP_1));
			if (a<(TMP_1-1)..0> != 0)
			then
				CFLAG = 1;
			else
				CFLAG = 0;
			endif;
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"


// sub instructions
op sub = sub_reg | subc | subx | sub_a|csub|csubn|msub|rsub|subb|subh|subs|subsh|subshu|subs_u

op csub (c:reg_d, d:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("csub %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s0010%4b%s%s00101011",c.image,d.image,foo,b.image,a.image)
   action = 	{
		if (d != 0)
		then
			result64 = coerce(card(64),a)-coerce(card(64),b);
		else
			result64 = coerce(card(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op csubn (c:reg_d, d:reg_d, a:reg_d, b:reg_d)
	syntax = format("csubn %s,%s,%s,%s",c.syntax,d.syntax,a.syntax,b.syntax)
	image = format("%s %s %4b XX XX %s %s %8b", c.image, d.image, 0x03, b.image, a.image, 0x2B)
	action = {
		if (d == 0)
		then
			result64 = coerce(card(64),a)-coerce(card(64),b);
		else
			result64 = coerce(card(64),a);
		endif;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
	}

op msub = msub_reg | msub_const | msub_reg64 | msub_const64 | msubs_reg | msubs_const | msubs_reg64 | msubs_const64 | msubu | msubh | msubq | msubad | msubadm | msubadr | msubm | msubr | msubrq

op msubrq = msubrq_1 | msubrq_2 | msubrsq_1 | msubrsq_2

op msubrq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x07, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result = d-TMP_1+0x8000;
		c=result<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}
	
op msubrq_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x06, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result = d-TMP_1+0x8000;
		c=result<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}
	
op msubrsq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x27, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result = d-TMP_1+0x8000;
		ssov(result,32,TMP_2);
		c=TMP_2<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}
	
op msubrsq_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x26, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result = d-TMP_1+0x8000;
		ssov(result,32,TMP_2);
		c=TMP_2<31..16> :: 0x0000;
		overflow(result);
		stickyOverflow();
		advancedOverflow(result);
		stickyAdvancedOverflow();
	}

op msubq = msubq_1 | msubq_2 | msubq_3| msubq_4| msubq_5| msubq_6| msubq_7| msubq_8| msubq_9| msubq_10 | msubsq_1 | msubsq_2 | msubsq_3| msubsq_4| msubsq_5| msubsq_6| msubsq_7| msubsq_8| msubsq_9| msubsq_10

op msubq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x02, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - (((a*b)<<n)>>32);
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1B, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - ((a*b)<<n);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x01, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - (((a*b<15..0>)<<n)>>16);
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x19, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - ((a*b<15..0>)<<n);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_5(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x00, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - (((a*b<31..16>)<<n)>>16);
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_6(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x18, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - ((a*b<31..16>)<<n);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_7(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x05, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d - TMP_1;
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op msubq_8(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1D, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d - (TMP_1<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_9(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x04, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d - TMP_1;
		c = result64<31..0>;
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubq_10(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x1C, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d - (TMP_1<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubsq_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x22, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - (((a*b)<<n)>>32);
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %s, %s, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3B, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - ((a*b)<<n);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x21, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - (((a*b<15..0>)<<n)>>16);
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %s, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x39, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - ((a*b<15..0>)<<n);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_5(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x20, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - (((a*b<31..16>)<<n)>>16);
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_6(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %s, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x38, n ,b.image, a.image, 0x63)
	action = {
		result64 = d - ((a*b<31..16>)<<n);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_7(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x25, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d - TMP_1;
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op msubsq_8(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %sL, %sL, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3D, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<15..0>==0x8000) && (b<15..0>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<15..0>*b<15..0>)<<n;
		endif;
		result64 = d - (TMP_1<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_9(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x24, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d - TMP_1;
		ssov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubsq_10(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.q %s, %s, %sU, %sU, #%d", c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b",c.image, d.image, 0x3C, n ,b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16>==0x8000) && (b<31..16>==0x8000) && (n==1);
		if(tmp1 == 1) then
			TMP_1 = 0x7FFFFFFF;
		else
			TMP_1 = (a<31..16>*b<31..16>)<<n;
		endif;
		result64 = d - (TMP_1<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubh = msubh_1 | msubh_2 | msubh_3 | msubh_4 | msubsh_1 | msubsh_2 | msubsh_3 | msubsh_4 

op msubh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1A, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x19, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x18, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msub.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1B, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubsh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3A, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubsh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x39, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubsh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x38, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubsh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubs.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3B, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> - TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubm = msubmh_1 | msubmh_2 | msubmh_3 | msubmh_4 | msubmsh_1 | msubmsh_2 | msubmsh_3 | msubmsh_4 

op msubmh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubm.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1E, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubmh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubm.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1D, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubmh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubm.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1C, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubmh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubm.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1F, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubmsh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubms.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3E, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubmsh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubms.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3D, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubmsh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubms.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3C, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubmsh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubms.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3F, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64 = d - ((TMP_1+TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubad = msubadh_1 | msubadh_2 | msubadh_3 | msubadh_4 | msubadsh_1 | msubadsh_2 | msubadsh_3 | msubadsh_4 

op msubadh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubad.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1A, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubad.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x19, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubad.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x18, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubad.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1B, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		c = result_word1 :: result_word0;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadsh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubads.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3A, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadsh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubads.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x39, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadsh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubads.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x38, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadsh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubads.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3B, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1;
		result_word0 = d<31..0> + TMP_0;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3 :: TMP_2;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadr = msubadrh_1 | msubadrh_2 | msubadrh_3 | msubadrh_4 | msubadrsh_1 | msubadrsh_2 | msubadrsh_3 | msubadrsh_4 

op msubadrh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadr.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0E, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadrh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadr.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0D, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadrh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadr.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0C, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadrh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadr.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0F, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadrsh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadrs.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2E, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadrsh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadrs.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2D, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubadrsh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadrs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2C, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadrsh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadrs.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2F, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) + TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubr = msubrh_1 | msubrh_2 | msubrh_3 | msubrh_4 | msubrsh_1 | msubrsh_2 | msubrsh_3 | msubrsh_4 | msubrh_5 | msubrsh_5

op msubrh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0E, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubrh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0D, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubrh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0C, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubrh_5(c:reg_d,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1E, n, b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1+0x8000;
		result_word0 = d<31..0> - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubrh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubr.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x0F, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		c = result_word1<31..16> :: result_word0<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubrsh_1(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2E, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubrsh_2(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2D, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubrsh_3(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2C, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}
	
op msubrsh_5(c:reg_d,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3E, n, b.image, a.image, 0x63)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result_word1 = d<63..32> - TMP_1+0x8000;
		result_word0 = d<31..0> - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubrsh_4(c:reg_d,d:reg_d,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubrs.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x2F, n, b.image, a.image, 0xA3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result_word1 = (d<31..16> :: 0x0000) - TMP_1+0x8000;
		result_word0 = (d<15..0> :: 0x0000) - TMP_0+0x8000;
		ssov(result_word0,32,TMP_2);
		ssov(result_word1,32,TMP_3);
		c = TMP_3<31..16> :: TMP_2<31..16>;
		overflow_h64(result_word1,result_word0);
		stickyOverflow();
		advancedOverflow_h64(result_word1,result_word0);
		stickyAdvancedOverflow();
	}

op msubadm = msubadmh_1 | msubadmh_2 | msubadmh_3 | msubadmh_4 | msubadmsh_1 | msubadmsh_2 | msubadmsh_3 | msubadmsh_4 

op msubadmh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadm.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1E, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubadmh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadm.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1D, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubadmh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadm.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1C, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubadmh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadm.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x1F, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		c = result64;
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubadmsh_1(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadms.h %s, %s, %s, %sLL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3E, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubadmsh_2(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadms.h %s, %s, %s, %sLU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3D, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<15..0>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<31..16>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubadmsh_3(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadms.h %s, %s, %s, %sUL, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3C, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<15..0> == 0x8000) && (b<15..0> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<31..16>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<15..0>*b<15..0>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubadmsh_4(c:reg_e,d:reg_e,a:reg_d,b:reg_d,n:card(2))
	syntax = format("msubadms.h %s, %s, %s, %sUU, #%d",c.syntax, d.syntax, a.syntax, b.syntax, n)
	image = format("%s %s %6b %2b %s %s %8b", c.image, d.image, 0x3F, n, b.image, a.image, 0xE3)
	action = {
		tmp1 = (a<15..0> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		tmp0 = (a<31..16> == 0x8000) && (b<31..16> == 0x8000) && (n==1);
		if (tmp1==1) then 
			TMP_1=0x7FFFFFFF;
		else
			TMP_1=((a<15..0>*b<31..16>)<<n);
		endif;
		if (tmp0==1) then 
			TMP_0=0x7FFFFFFF;
		else
			TMP_0=((a<31..16>*b<31..16>)<<n);
		endif;
		result64 = d-((TMP_1-TMP_0)<<16);
		ssov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}

op msubu = msubu_reg | msubu_const | msubsu_reg | msubsu_const | msubsu64_reg | msubsu64_const

op msubu_const(c:reg_e,d:reg_e,a:reg_d,const:const9)
	syntax = format("msub.u %s, %s, %s, %s",c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s %3b %s %s %8b",c.image, d.image, 0x02, const.image, a.image, 0x33)
	action = {
		result64 = d - (coerce(card(64),a)-coerce(card(64),const));
		c = coerce(card(64),result64);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubu_reg(c:reg_e,d:reg_e,a:reg_d,b:reg_d)
	syntax = format("msub.u %s, %s, %s, %s",c.syntax, d.syntax, a.syntax, b.syntax)
	image = format("%s %s %8b %s %s %8b",c.image, d.image, 0x68, b.image, a.image, 0x23)
	action = {
		result64 = d - (coerce(card(64),a)-coerce(card(64),b));
		c = coerce(card(64),result64);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsu64_const(c:reg_e,d:reg_e,a:reg_d,const:const9)
	syntax = format("msubs.u %s, %s, %s, %s",c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s %3b %s %s %8b",c.image, d.image, 0x06, const.image, a.image, 0x33)
	action = {
		result64 = d - (coerce(card(64),a)-coerce(card(64),const));
		suov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsu64_reg(c:reg_e,d:reg_e,a:reg_d,b:reg_d)
	syntax = format("msubs.u %s, %s, %s, %s",c.syntax, d.syntax, a.syntax, b.syntax)
	image = format("%s %s %8b %s %s %8b",c.image, d.image, 0xE8, b.image, a.image, 0x23)
	action = {
		result64 = d - (coerce(card(64),a)-coerce(card(64),b));
		suov(result64,64,c);
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
	}
	
op msubsu_const(c:reg_d,d:reg_d,a:reg_d,const:const9)
	syntax = format("msubs.u %s, %s, %s, %s",c.syntax, d.syntax, a.syntax, const.syntax)
	image = format("%s %s %3b %s %s %8b",c.image, d.image, 0x04, const.image, a.image, 0x33)
	action = {
		result64 = d - (coerce(card(32),a)-coerce(card(32),const));
		suov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}
	
op msubsu_reg(c:reg_d,d:reg_d,a:reg_d,b:reg_d)
	syntax = format("msubs.u %s, %s, %s, %s",c.syntax, d.syntax, a.syntax, b.syntax)
	image = format("%s %s %8b %s %s %8b",c.image, d.image, 0x88, b.image, a.image, 0x23)
	action = {
		result64 = d - (coerce(card(32),a)-coerce(card(32),b));
		suov(result64,32,c);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
	}

op msub_reg (c:reg_d,d:reg_d,a:reg_d,b:reg_d)
   syntax = format("msub %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s00001010%s%s00100011",c.image,d.image,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),b));
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op msub_const (c:reg_d,d:reg_d,a:reg_d,const:const9)
   syntax = format("msub %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,const.syntax)
   image = format("%s%s001%s%s00110011",c.image,d.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),TMP_1));
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<0..31>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op msub_reg64 (c:reg_e,d:reg_e,a:reg_d,b:reg_d)
   syntax = format("msub %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s%8b%s%s%8b",c.image,d.image,0x6A,b.image,a.image,0x23)
   action = 	{
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),b));
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64;
		}

op msub_const64 (c:reg_e,d:reg_e,a:reg_d,const:const9)
   syntax = format("msub %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,const.syntax)
   image = format("%s%s011%s%s00110011",c.image,d.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),TMP_1));
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		c = result64;
		}

op msubs_reg (c:reg_d,d:reg_d,a:reg_d,b:reg_d)
   syntax = format("msubs %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s%8b%s%s00100011",c.image,d.image,0x8A,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),b));
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op msubs_const (c:reg_d,d:reg_d,a:reg_d,const:const9)
   syntax = format("msubs %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,const.syntax)
   image = format("%s%s101%s%s00110011",c.image,d.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),TMP_1));
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32,c);
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op msubs_reg64 (c:reg_e,d:reg_e,a:reg_d,b:reg_d)
   syntax = format("msubs %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,b.syntax)
   image = format("%s%s%8b%s%s%8b",c.image,d.image,0xEA,b.image,a.image,0x23)
   action = 	{
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),b));
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		ssov(result64,64,c);
		}

op msubs_const64 (c:reg_e,d:reg_e,a:reg_d,const:const9)
   syntax = format("msubs %s, %s, %s, %s",c.syntax,d.syntax,a.syntax,const.syntax)
   image = format("%s%s111%s%s00110011",c.image,d.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),d)-(coerce(int(64),a)*coerce(int(64),TMP_1));
		overflow64(result64);
		stickyOverflow();
		advancedOverflow64(result64);
		stickyAdvancedOverflow();
		ssov(result64,64,c);
		}

op rsub = r_sub | rsubs | rsubs_u

op rsubs(c:reg_d, a:reg_d, const:const9)
	syntax = format("rsubs %s, %s, %s", c.syntax,a.syntax,const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x0A, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),TMP_1)-coerce(int(64),a);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64, 32, c);
	}
	
op rsubs_u(c:reg_d, a:reg_d, const:const9)
	syntax = format("rsubs.u %s, %s, %s", c.syntax,a.syntax,const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x0B, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const,TMP_1);
		result64 = coerce(card(64),TMP_1)-coerce(card(64),a);
		overflow_u(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		suov(result64, 32, c);
	}

op r_sub(c:reg_d, a:reg_d, const:const9)
   syntax = format("rsub %s, %s, %s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001000%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		result64 = coerce(int(64),TMP_1)-coerce(int(64),a);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SETI(T1, S9(2)); SUB(D(0), T1, D(1));"

op sub_reg (c:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("sub %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001000%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)-coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SUB(D(0), D(1), D(2));"

op subb (c:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("sub.b %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01001000%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		TMP_1 = a<31..24>-b<31..24>;
		TMP_2 = a<23..16>-b<23..16>;
		TMP_3 = a<15..8>-b<15..8>;
		TMP_4 = a<7..0>-b<7..0>;
		if ( 	(TMP_1 > 0x7F) || (TMP_1 < 0xFFFFFF80) ||
			(TMP_2 > 0x7F) || (TMP_2 < 0xFFFFFF80) ||
			(TMP_3 > 0x7F) || (TMP_3 < 0xFFFFFF80) ||
			(TMP_4 > 0x7F) || (TMP_4 < 0xFFFFFF80) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		if ( 	(TMP_1<7..7> && TMP_1<6..6>) ||
			(TMP_2<7..7> && TMP_2<6..6>) ||
			(TMP_3<7..7> && TMP_3<6..6>) ||
			(TMP_4<7..7> && TMP_4<6..6>) )
		then
			AVFLAG = 1;
		else
			AVFLAG = 0;
		endif;
		stickyAdvancedOverflow();
		c<31..24> = TMP_1<7..0>;
		c<23..16> = TMP_2<7..0>;
		c<15..8> = TMP_3<7..0>;
		c<7..0> = TMP_4<7..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op subh (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("sub.h %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01101000%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		TMP_1 = a<31..16>-b<31..16>;
		TMP_2 = a<15..0>-b<15..0>;
		if ( 	(TMP_1 > 0x7FFF) || (TMP_1 < 0xFFFF8000) ||
			(TMP_2 > 0x7FFF) || (TMP_2 < 0xFFFF8000) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		if ( 	(TMP_1<15..15> && TMP_1<14..14>) ||
			(TMP_2<15..15> && TMP_2<14..14>) )
		then
			AVFLAG = 1;
		else
			AVFLAG = 0;
		endif;
		stickyAdvancedOverflow();
		c<15..8> = TMP_1<7..0>;
		c<7..0> = TMP_2<7..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op subc (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("subc %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001101%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)-coerce(int(64),b)+CFLAG-1;
		carry(result64);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op subs (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("subs %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001010%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)-coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		ssov(result64,32, c);
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"
	
op subs_u(a:reg_d,b:reg_d,c:reg_d)
	syntax = format("subs.u %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x0B, b.image, a.image, 0x0B)
	action = {
		result64 = coerce(card(64),a)-coerce(card(64),b);
		overflow_u(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		suov(result64,32, c);
	}


op subsh (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("subs.h %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01101010%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		TMP_1 = a<31..16>-b<31..16>;
		TMP_2 = a<15..0>-b<15..0>;
		if ( 	(TMP_1 > 0x7FFF) || (TMP_1 < 0xFFFF8000) ||
			(TMP_2 > 0x7FFF) || (TMP_2 < 0xFFFF8000) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		if ( 	(TMP_1<15..15> && TMP_1<14..14>) ||
			(TMP_2<15..15> && TMP_2<14..14>) )
		then
			AVFLAG = 1;
		else
			AVFLAG = 0;
		endif;
		stickyAdvancedOverflow();
		ssov(TMP_1,16,TMP_1);
		ssov(TMP_2,16,TMP_2);
		c<32..16> = TMP_1<15..0>;
		c<15..0> = TMP_2<15..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op subshu (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("subs.hu %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s01101011%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		TMP_1 = a<31..16>-b<31..16>;
		TMP_2 = a<15..0>-b<15..0>;
		if ( 	(TMP_1 > 0xFFFF) || (TMP_1 < 0x0000) ||
			(TMP_2 > 0xFFFF) || (TMP_2 < 0x0000) )
		then
			VFLAG = 1;
		else
			VFLAG = 0;
		endif;
		stickyOverflow();
		if ( 	(TMP_1<15..15> && TMP_1<14..14>) ||
			(TMP_2<15..15> && TMP_2<14..14>) )
		then
			AVFLAG = 1;
		else
			AVFLAG = 0;
		endif;
		stickyAdvancedOverflow();
		suov(TMP_1,16,TMP_1);
		suov(TMP_2,16,TMP_2);
		c<32..16> = TMP_1<15..0>;
		c<15..0> = TMP_2<15..0>;
		}
	otawa_sem = "SCRATCH(PSW); SCRATCH(D(0));"

op subx (c:reg_d, a:reg_d, b:reg_d, foo:card(4))
   syntax = format("subx %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001100%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		result64 = coerce(int(64),a)-coerce(int(64),b);
		overflow(result64);
		stickyOverflow();
		advancedOverflow(result64);
		stickyAdvancedOverflow();
		carry(result64);
		c = result64<31..0>;
		}
	otawa_sem = "SCRATCH(PSW); SUB(D(0), D(1), D(2));"


// xor instructions
op xor = xor_reg | xor_const9 | xor_t |xnor | xor_eq | xor_ne | xor_ge | xor_lt

op xor_lt = xor_lt_reg | xor_lt_const | xor_ltu_reg | xor_ltu_const

op xor_lt_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("xor.lt %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x31, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const,TMP_1);
		if (coerce(int(32),const) < coerce(int(32),TMP_1)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}
	
op xor_lt_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("xor.lt %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x31, b.image, a.image, 0x0B)
	action = {
		if (coerce(int(32),a) < coerce(int(32),b)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}
	
op xor_ltu_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("xor.lt.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x32, const.image, a.image, 0x8B)
	action = {
		if (coerce(card(32),a) < coerce(card(32),const)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}
	
op xor_ltu_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("xor.lt.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x32, b.image, a.image, 0x0B)
	action = {
		if (coerce(card(32),a) < coerce(card(32),b)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}

op xor_ge = xor_ge_reg | xor_ge_const | xor_geu_reg | xor_geu_const

op xor_ge_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("xor.ge %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x33, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const,TMP_1);
		if (coerce(int(32),const) >= coerce(int(32),TMP_1)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}
	
op xor_ge_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("xor.ge %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x33, b.image, a.image, 0x0B)
	action = {
		if (coerce(int(32),a) >= coerce(int(32),b)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}
	
op xor_geu_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("xor.ge.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x34, const.image, a.image, 0x8B)
	action = {
		if (coerce(card(32),a) >= coerce(card(32),const)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}
	
op xor_geu_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("xor.ge.u %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x34, b.image, a.image, 0x0B)
	action = {
		if (coerce(card(32),a) >= coerce(card(32),b)) then
			tmp1 = 1;
		else
			tmp1 = 0;
		endif;
		c<0..0> = c<0..0> ^ tmp1;
	}

op xor_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("xor %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00001100%4b%s%s00001111",c.image,foo,b.image,a.image)
   action = 	{
		c = (a^b);
		}
	otawa_sem = "SCRATCH(D(0));"

op xor_const9 (c:reg_d,a:reg_d,const:const9)
   syntax = format("xor %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001100%s%s10001111",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		c = (a^TMP_1);
		}
	otawa_sem = "SCRATCH(D(0));"

op xor_t(c: reg_d, pos2: pos, pos1: pos, b: reg_d, a: reg_d)
	syntax	= format("xor.t %s, %s, %s, %s, %s", c.syntax, a.syntax, pos1, b.syntax, pos2)
	image	= format("%s%5b11%5b%s%s00000111", c.image, pos2, pos1, b.image, a.image)
	action	= { c<0..0> = a<pos1..pos1> ^ b<pos2..pos2>; c<1..31> = 0; }
	otawa_sem = "SCRATCH(D(0));"

op xnor = xnor_reg | xnor_const |xnor_t

op xnor_const(c:reg_d,a:reg_d,const:const9)
	syntax = format("xnor %s, %s, %s",c.syntax,a.syntax,const.syntax)
	image = format("%s %7b %s %s %8b",c.image, 0x0D, const.image, a.image, 0x8F)
	action  = {
		zero_ext32(const, TMP_1, 9);
		c = ~(a ^ TMP_1);
	}
	
op xnor_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("xnor %s, %s, %s",c.syntax,a.syntax,b.syntax)
	image = format("%s %8b XX XX %s %s %8b",c.image, 0x0D, b.image, a.image, 0x0F)
	action = {
		c = ~(a^b);
	}
	
op xnor_t(c:reg_d,a:reg_d,b:reg_d,pos1:pos,pos2:pos)
	syntax = format("xnor.t %s, %s, %s, %s, %s",c.syntax,a.syntax,pos1.syntax,b.syntax,pos2.syntax)
	image = format("%s %s 10 %s %s %s %8b",c.image, pos2.image, pos1.image, b.image, a.image, 0x07)
	action = {
		tmp1 = ~(a<pos1..pos1> ^ b<pos2..pos2>);
		zero_ext32(c, tmp1, 1);
	}
	
op xor_eq = xor_eq_const | xor_eq_reg 

op xor_eq_const(c:reg_d, a:reg_d, const:const9)
	syntax = format("xor.eq %s, %s, %s",c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x2F, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const, TMP_1);
		if (a==TMP_1) then tmp1 = 1; else tmp1=0; endif;
		c<0..0> = c<0..0> ^ tmp1;	
	}
	
op xor_eq_reg(c:reg_d, a:reg_d, b:reg_d)
	syntax = format("xor.eq %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x2F, b.image, a.image, 0x0B)
	action = {
		if (a==b) then tmp1 = 1; else tmp1=0; endif;
		c<0..0> = c<0..0> ^ tmp1;	
	}

op xor_ne = xor_ne_const | xor_ne_reg

op xor_ne_const(c:reg_d, a:reg_d, const:const9)
	syntax = format("xor.ne %s, %s, %s",c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x30, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const, TMP_1);
		if (a!=TMP_1) then tmp1 = 1; else tmp1=0; endif;
		c<0..0> = c<0..0> ^ tmp1;	
	}
	
op xor_ne_reg(c:reg_d, a:reg_d, b:reg_d)
	syntax = format("xor.ne %s, %s, %s",c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x30, b.image, a.image, 0x0B)
	action = {
		if (a!=b) then tmp1 = 1; else tmp1=0; endif;
		c<0..0> = c<0..0> ^ tmp1;	
	}

// sub.a instructions
op sub_a(c:reg_a, a:reg_a, b:reg_a, foo:card(4))
   syntax = format("sub.a %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00000010%4b%s%s00000001",c.image,foo,b.image,a.image)
   action = 	{
		result = a-b;
		c = result;
		}
	otawa_sem = "SUB(A(0), A(1), A(2));"

// lt instructions
op lt = lt_reg|lt_const|ltu_reg|ltu_const|lt_a|lt_b|lt_bu|lt_h|lt_hu|lt_w|lt_wu

op lt_reg (a:reg_d,b:reg_d,c:reg_d,foo:card(4))
   syntax = format("lt %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00010010%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (a < b)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op lt_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("lt %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0010010%s%s10001011",c.image,const.image,a.image)
   action = 	{
		sign_ext9to32(const,TMP_1);
		if (a < TMP_1)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"


// lt.u instructions
op ltu_reg (a:reg_d,b:reg_d,c:reg_d,foo:card(4))
  syntax = format("lt.u %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s00010011%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		if (uword0(a) < uword0(b))
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op ltu_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("lt.u %s, %s, %s",c.syntax,a.syntax,const.syntax)
   image = format("%s0010011%s%s10001011",c.image,const.image,a.image)
   action = 	{
		zero_ext32(const,TMP_1,9);
		if (a < TMP_1)
		then
			c = 1;
		else
			c = 0;
		endif;
		}
	otawa_sem = "SCRATCH(D(0));"

op lt_a(a:reg_a,b:reg_a,c:reg_d)
	syntax = format("lt.a %s, %s, %s",c.syntax,a.syntax,b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x42, b.image, a.image, 0x01)
	action = {
		if (uword0(a) < uword0(b)) then
			c=1;
		else
			c=0;
		endif;		
	}
	

op lt_b(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("lt.b %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x52, b.image, a.image, 0x0B)
	action = {
		c<31..24> =	f_lt(byte3(a), byte3(b));
		c<23..16> =	f_lt(byte2(a), byte2(b));
		c<15..8>  = f_lt(byte1(a), byte1(b));
		c<7..0>   = f_lt(byte0(a), byte0(b));
	}

op lt_bu(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("lt.bu %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x53, b.image, a.image, 0x0B)
	action = {
		c<31..24> = f_lt(ubyte3(a), ubyte3(b));
		c<23..16> = f_lt(ubyte2(a), ubyte2(b));
		c<15..8>  = f_lt(ubyte1(a), ubyte1(b));
		c<7..0>   = f_lt(ubyte0(a), ubyte0(b));
	}
	
op lt_h(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("lt.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x72, b.image, a.image, 0x0B)
	action = {
		c<31..16>	= f_lt(half1(a), half1(b));
		c<15..0>	= f_lt(half0(a), half0(b));
	}

op lt_hu(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("lt.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x73, b.image, a.image, 0x0B)
	action = {
		c<31..16>	= f_lt(half1(a), half1(b));
		c<15..0>	= f_lt(half0(a), half0(b));
	}
	
op lt_w (a:reg_d,b:reg_d,c:reg_d)
   syntax = format("lt.w %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s%8b XX XX %s%s %8b",c.image,0x92,b.image,a.image,0x0B)
   action = 	{
		if (a < b)
		then
			c = 0xFFFFFFFF;
		else
			c = 0;
		endif;
		}

op lt_wu (a:reg_d,b:reg_d,c:reg_d)
   syntax = format("lt.wu %s, %s, %s",c.syntax,a.syntax,b.syntax)
   image = format("%s%8b XX XX %s%s %8b",c.image,0x93,b.image,a.image,0x0B)
   action = 	{
		if (uword0(a) < uword0(b))
		then
			c = 0xFFFFFFFF;
		else
			c = 0;
		endif;
		}


op orn = orn_const | orn_reg | orn_t

op orn_const(c:reg_d,a:reg_d,const:const9)
   syntax = format("orn %s, %s, %s",c.syntax,a.syntax,const.syntax)
   image = format("%s0001111%s%s10001111",c.image,const.image,a.image)
   action = 	{
		TMP_1 = coerce(card(32),const);
		c = a | (~TMP_1);
		}
	otawa_sem = "SCRATCH(D(0));"
	
op orn_reg(c:reg_d,a:reg_d,b:reg_d)
	syntax = format("orn %s, %s, %s",c.syntax,a.syntax,b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x0F, b.image, a.image, 0x0F)
	action = {
		c = a | (~b);
	}
	
op orn_t(c:reg_d,a:reg_d,b:reg_d,pos1:pos,pos2:pos)
	syntax = format("orn.t %s, %s, %s, %s, %s",c.syntax, a.syntax, pos1.syntax, b.syntax, pos2.syntax)
	image = format("%s %s 01 %s %s %s %8b",c.image, pos2.image, pos1.image, b.image, a.image, 0x07)
	action = {
		tmp1 = a<pos1..pos1> | (~b<pos2..pos2>);
		zero_ext32(tmp1, c, 1);
	}

op min = min_u_reg | min_u_const | min_reg | min_const | min_bu | min_b | min_h | min_hu

macro fmin(a,b) = if a < b then a else b endif

op min_bu(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("min.bu %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x59, b.image, a.image, 0x0B)
	action = {
		c<31..24>	= fmin(ubyte3(a), ubyte3(b));
		c<23..16>	= fmin(ubyte2(a), ubyte2(b));
		c<15..8>	= fmin(ubyte1(a), ubyte1(b));
		c<7..0>		= fmin(ubyte0(a), ubyte0(b));
	}
	
op min_b(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("min.b %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x58, b.image, a.image, 0x0B)
	action = {
		c<31..24>	= fmin(byte3(a), byte3(b));
		c<23..16>	= fmin(byte2(a), byte2(b));
		c<15..8>	= fmin(byte1(a), byte1(b));
		c<7..0>		= fmin(byte0(a), byte0(b));
	}
	
op min_hu(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("min.hu %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x79, b.image, a.image, 0x0B)
	action = {
		c<31..24>	= fmin(uhalf1(a), uhalf1(b));
		c<23..16>	= fmin(uhalf0(a), uhalf0(b));
	}
	
op min_h(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("min.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x78, b.image, a.image, 0x0B)
	action = {
		c<31..24>	= fmin(half1(a), half1(b));
		c<23..16>	= fmin(half0(a), half0(b));
	}

op min_reg(a:reg_d,b:reg_d,c:reg_d)
	syntax = format("min %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x18, b.image, a.image, 0x0B)
	action = {
		c = fmin(word0(a),word0(b));
	}

op min_const(a:reg_d,c:reg_d,const:const9)
	syntax = format("min %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x18, const.image, a.image, 0x8B)
	action = {
		sign_ext9to32(const,TMP_1);
		c = fmin(word0(a),word0(TMP_1));
	}

op min_u_const(c:reg_d, a:reg_d, const:const9)
	syntax = format("min.u %s, %s, %s", c.syntax, a.syntax, const.syntax)
	image = format("%s %7b %s %s %8b", c.image, 0x19, const.image, a.image, 0x8B)
	action = {
		zero_ext32(const,TMP_1,9);
		c = fmin(uword0(a),uword0(TMP_1));
	}

op min_u_reg (c:reg_d,foo:card(4),b:reg_d,a:reg_d)
   syntax = format("min.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00011001%4b%s%s00001011",c.image,foo,b.image,a.image)
   action = 	{
		c = fmin(uword0(a),uword0(b));
		}
	otawa_sem = "SCRATCH(D(0));"

op max = max_reg|max_const|maxu_reg|maxu_const|max_b|max_bu|max_h|max_hu

macro fmax(a, b) = if a > b then a else b endif

op max_h(a:reg_d,b:reg_d,c:reg_d)
	syntax = format("max.h %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x7A, b.image, a.image, 0x0B)
	action = {
		c<31..16> = fmax(half1(a),half1(b));
		c<15..0> = fmax(half0(a),half0(b));
	}
	
op max_hu(a:reg_d,b:reg_d,c:reg_d)
	syntax = format("max.hu %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %8b", c.image, 0x7B, b.image, a.image, 0x0B)
	action = {
		c<31..16> = fmax(uhalf1(a),uhalf1(b));
		c<15..0> = fmax(uhalf0(a),uhalf0(b));
	}

op max_b(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("max.b %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x5A, b.image, a.image, 0x0B)
	action = {
		c<31..24>	= fmax(byte3(a), byte3(b));
		c<23..16>	= fmax(byte2(a), byte2(b));
		c<15..8>	= fmax(byte1(a), byte1(b));
		c<7..0>		= fmax(byte0(a), byte0(b));
	}

op max_bu(c: reg_d, a: reg_d, b: reg_d)
	syntax = format("max.bu %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX XX %s %s %08b", c.image, 0x5B, b.image, a.image, 0x0B)
	action = {
		c<31..24>	= fmax(ubyte3(a), ubyte3(b));
		c<23..16>	= fmax(ubyte2(a), ubyte2(b));
		c<15..8>	= fmax(ubyte1(a), ubyte1(b));
		c<7..0>		= fmax(ubyte0(a), ubyte0(b));
	}

op max_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("max %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00011010%4b%s%s00001011",c.image,foo,b.image,a.image)
   action =	{
   c = fmax(word0(a),word0(b));
	 }
	otawa_sem = "SCRATCH(D(0));"

op max_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("max %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0011010%s%s10001011",c.image,const.image,a.image)
   action =	{
		sign_ext9to32(const,TMP_1);
		c = fmax(word0(a),word0(TMP_1));
		}
	otawa_sem = "SCRATCH(D(0));"

op maxu_reg (c:reg_d,a:reg_d,b:reg_d,foo:card(4))
   syntax = format("max.u %s,%s,%s",c.syntax,a.syntax,b.syntax)
   image = format("%s00011011%4b%s%s00001011",c.image,foo,b.image,a.image)
   action =	{
		c = fmax(uword0(a),uword0(b));
		}
	otawa_sem = "SCRATCH(D(0));"

op maxu_const (c:reg_d,a:reg_d,const:const9)
   syntax = format("max.u %s,%s,%s",c.syntax,a.syntax,const.syntax)
   image = format("%s0011011%s%s10001011",c.image,const.image,a.image)
   action =	{
		zero_ext32(const,TMP_1,9);
		c = fmax(uword0(a),uword0(TMP_1));
		}
	otawa_sem = "SCRATCH(D(0));"

op bmerge(a:reg_d, b:reg_d, c:reg_d)
	syntax = format("bmerge %s, %s, %s", c.syntax, a.syntax, b.syntax)
	image = format("%s %8b XX 00 %s %s %8b", c.image, 0x01, b.image, a.image, 0x4B)
	action = {
		c<31..24> = a<15..15> :: b<15..15> :: a<14..14> :: b<14..14> :: a<13..13> :: b<13..13> :: a<12..12> :: b<12..12>;
		c<23..16> = a<11..11> :: b<11..11> :: a<10..10> :: b<10..10> :: a<9..9> :: b<9..9> :: a<8..8> :: b<8..8>;
		c<15..8> = a<7..7> :: b<7..7> :: a<6..6> :: b<6..6> :: a<5..5> :: b<5..5> :: a<4..4> :: b<4..4>;
		c<7..0> = a<3..3> :: b<3..3> :: a<2..2> :: b<2..2> :: a<1..1> :: b<1..1> :: a<0..0> :: b<0..0>;
	} 
	
op bsplit(c:reg_e, a:reg_d)
	syntax = format("bsplit %s, %s", c.syntax, a.syntax)
	image = format ("%s %8b XX 00 XXXX %s %8b", c.image, 0x09, a.image, 0x4B)
	action = {
		c<63..48> = 0x0000;
		c<47..40> = a<31..31> :: a<29..29> :: a<27..27> ::a<25..25> :: a<23..23> :: a<21..21> :: a<19..19> :: a<17..17>;
		c<39..32> = a<15..15> :: a<13..13> :: a<11..11> ::a<9..9> :: a<7..7> :: a<5..5> :: a<3..3> :: a<1..1>;		
		c<31..16> = 0x0000;
		c<15..8> = a<30..30> :: a<28..28> :: a<26..26> ::a<24..24> :: a<22..22> :: a<20..20> :: a<18..18> :: a<16..16>;
		c<7..0> = a<14..14> :: a<12..12> :: a<10..10> ::a<8..8> :: a<6..6> :: a<4..4> :: a<2..2> :: a<0..0>;
	}
	
op ixmax(c:reg_e, d:reg_e, b:reg_d)
	syntax = format("ixmax %s, %s, %s",c.syntax, d.syntax, b.syntax)
	image = format("%s %s %4b XX 00 %s XXXX %8b", c.image, d.image, 0x0A, b.image, 0x6B)
	action = {
		c<15..0> = d<15..0> +2;
		c<63..48> = 0x00;
		if ((coerce(int(16),b<15..0>) >= coerce(int(16),b<31..16>)) && (coerce(int(16),b<15..0>) > coerce(int(16),d<47..32>))) then
			c<47..32> = b<15..0>;
			c<31..16> = d<15..0>;
		else
			if ((coerce(int(16),b<31..16>) > coerce(int(16),b<15..0>)) && (coerce(int(16),b<31..16>) > coerce(int(16),d<47..32>))) then
				c<47..32> = b<31..16>;
				c<31..16> = d<15..0>+1;
			else
				c<47..32> = d<47..32>;
				c<31..16> = d<31..16>;
			endif;
		endif;
	}
	
op ixmax_u(c:reg_e, d:reg_e, b:reg_d)
	syntax = format("ixmax.u %s, %s, %s",c.syntax, d.syntax, b.syntax)
	image = format("%s %s %4b XX 00 %s XXXX %8b", c.image, d.image, 0x0B, b.image, 0x6B)
	action = {
		c<15..0> = d<15..0> +2;
		c<63..48> = 0x00;
		if ((coerce(card(16),b<15..0>) >= coerce(card(16),b<31..16>)) && (coerce(card(16),b<15..0>) > coerce(card(16),d<47..32>))) then
			c<47..32> = b<15..0>;
			c<31..16> = d<15..0>;
		else
			if ((coerce(card(16),b<31..16>) > coerce(card(16),b<15..0>)) && (coerce(card(16),b<31..16>) > coerce(card(16),d<47..32>))) then
				c<47..32> = b<31..16>;
				c<31..16> = d<15..0>+1;
			else
				c<47..32> = d<47..32>;
				c<31..16> = d<31..16>;
			endif;
		endif;
	}
		
op ixmin(c:reg_e, d:reg_e, b:reg_d)
	syntax = format("ixmin %s, %s, %s",c.syntax, d.syntax, b.syntax)
	image = format("%s %s %4b XX 00 %s XXXX %8b", c.image, d.image, 0x08, b.image, 0x6B)
	action = {
		c<15..0> = d<15..0> +2;
		c<63..48> = 0x00;
		if ((coerce(int(16),b<15..0>) <= coerce(int(16),b<31..16>)) && (coerce(int(16),b<15..0>) < coerce(int(16),d<47..32>))) then
			c<47..32> = b<15..0>;
			c<31..16> = d<15..0>;
		else
			if ((coerce(int(16),b<31..16>) < coerce(int(16),b<15..0>)) && (coerce(int(16),b<31..16>) < coerce(int(16),d<47..32>))) then
				c<47..32> = b<31..16>;
				c<31..16> = d<15..0>+1;
			else
				c<47..32> = d<47..32>;
				c<31..16> = d<31..16>;
			endif;
		endif;
	}
	
op ixmin_u(c:reg_e, d:reg_e, b:reg_d)
	syntax = format("ixmin.u %s, %s, %s",c.syntax, d.syntax, b.syntax)
	image = format("%s %s %4b XX 00 %s XXXX %8b", c.image, d.image, 0x09, b.image, 0x6B)
	action = {
		c<15..0> = d<15..0> +2;
		c<63..48> = 0x00;
		if ((coerce(card(16),b<15..0>) <= coerce(card(16),b<31..16>)) && (coerce(card(16),b<15..0>) < coerce(card(16),d<47..32>))) then
			c<47..32> = b<15..0>;
			c<31..16> = d<15..0>;
		else
			if ((coerce(card(16),b<31..16>) < coerce(card(16),b<15..0>)) && (coerce(card(16),b<31..16>) < coerce(card(16),d<47..32>))) then
				c<47..32> = b<31..16>;
				c<31..16> = d<15..0>+1;
			else
				c<47..32> = d<47..32>;
				c<31..16> = d<31..16>;
			endif;
		endif;
	}
	
	
op parity(c:reg_d, a:reg_d)
	syntax = format("parity %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX 00 XXXX %s %8b",c.image, 0x02, a.image, 0x4B)
	action = {
		c = 0x00000000;
		c<24..24> = a<31..31> ^ a<30..30> ^ a<29..29> ^ a<28..28> ^ a<27..27> ^ a<26..26> ^ a<25..25> ^ a<24..24>;
		c<16..16> = a<23..23> ^ a<22..22> ^ a<21..21> ^ a<20..20> ^ a<19..19> ^ a<18..18> ^ a<17..17> ^ a<16..16>;
		c<8..8> = a<15..15> ^ a<14..14> ^ a<13..13> ^ a<12..12> ^ a<11..11> ^ a<10..10> ^ a<9..9> ^ a<8..8>;
		c<0..0> = a<7..7> ^ a<6..6> ^ a<5..5> ^ a<4..4> ^ a<3..3> ^ a<2..2> ^ a<1..1> ^ a<0..0>;			
	}
	
op sat = sat_b | sat_bu | sat_h | sat_hu

op sat_b(c:reg_d,a:reg_d)
	syntax = format("sat.b %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x5E, a.image, 0x0B)
	action = {
		if(coerce(int(32),a) < -0x80) then
			c = -0x80;
		else if (coerce(int(32),a) > 0x7F) then
			c = 0x7F;
		else
			c = a;
		endif;
		endif;
	}
	
op sat_bu(c:reg_d,a:reg_d)
	syntax = format("sat.bu %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x5F, a.image, 0x0B)
	action = {
		if (coerce(card(32),a) > 0xFF) then
			c = 0xFF;
		else
			c = a;
		endif;
	}
	
op sat_h(c:reg_d,a:reg_d)
	syntax = format("sat.h %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x7E, a.image, 0x0B)
	action = {
		if(coerce(int(32),a) < -0x8000) then
			c = -0x8000;
		else if (coerce(int(32),a) > 0x7FFF) then
			c = 0x7FFF;
		else
			c = a;
		endif;
		endif;
	}
	
op sat_hu(c:reg_d,a:reg_d)
	syntax = format("sat.hu %s, %s", c.syntax, a.syntax)
	image = format("%s %8b XX XX XXXX %s %8b", c.image, 0x7F, a.image, 0x0B)
	action = {
		if (coerce(card(32),a) > 0xFFFF) then
			c = 0xFFFF;
		else
			c = a;
		endif;
	}
	
