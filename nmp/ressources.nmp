let proc = "tricore"
let AREGS = 4
let DREGS = 4
let MEM_SIZE = 32

//the memory is little endian
let M_is_little = 0
let bit_order = "lowermost"
let bit_image_order =  1

type word = card(32)
type double_word = card(64)
type byte = card(8)
type index = card(AREGS)


//les alias ne fonctionnent pas -> CSFR inutile, "initial = " ne fonctionne pas

reg A[2**AREGS,word]							//adress registers
reg D[2**DREGS,word]							//data registers
reg E[2**(DREGS-1),double_word] alias = D[0]	//64 bits data registers
reg P[2**(AREGS-1),double_word] alias = A[0]	//64 bits adress registers

//reg CSFR[13,word] //core special function register

reg PCXI[1,word] 		//alias = CSFR[0] //previous context information
reg PSW[1,word] 		//initial = 0x00000B80 //alias = CSFR[1] //program status word
reg PC[1,word] pc = 1	//alias = CSFR[2] //program counter register
reg SYSCON[1,word]		//initial = 0x00000000//alias = CSFR[3] //system configuration register
reg CPU_ID[1,word]		//alias = CSFR[4] //CPU identification register
reg ICR[1,word]			//initial = 0x00000000//alias = CSFR[9] //Interrupt Control Register
reg FCX[1,word]			//alias = CSFR[10] //free CSA list head pointer register
reg LCX[1,word]			//alias = CSFR[11] //free CSA list limit pointer
reg ISP[1,word]			//alias = CSFR[?] // Interrupt stack pointer


reg DBGSR[1,word] //initial = 0x00000000//debug status register
reg SWEVT[1,word] //initial = 0x00000000//software debug event register


var result[1,word]
var TMP_1[1,word]
var TMP_2[1,word]
var TMP_3[1,word]
var TMP_4[1,word]
var TMP_5[1,word]
var MAX[1,word]
var MIN[1,word]
var indice[1,word]

var TMP64_1[1,double_word]
var TMP64_2[1,double_word]
var result64[1,double_word]

mem M[32,byte]

reg NPC[1,word]
reg PPC[1,word]

// Floating variables
var fp_exp[1, card(8)]
var fp_frac[1, card(23)]
var int_exp[1, int(32)]
var int_mant[1, int(32)]


///////////////////////////////////////////
// Program status word
///////////////////////////////////////////

macro CFLAG = \
	PSW<31..31>

macro VFLAG = \
	PSW<30..30>

macro SVFLAG = \
	PSW<29..29>

macro AVFLAG = \
	PSW<28..28>

macro SAVFLAG = \
	PSW<27..27>

macro CDEFLAG = \
	PSW<7..7>

macro CDC = \
	PSW<0..6>

macro IO = \
	PSW<10..11>

///////////////////////////////////////////
// free CSA list head pointer register
///////////////////////////////////////////

macro FCXS = \
	FCX<16..19>

macro FCXO = \
	FCX<0..15>


///////////////////////////////////////////
// previous context information
///////////////////////////////////////////

macro PCPN = \
	PCXI<24..31>

macro PIE = \
	PCXI<23..23>

macro UL = \
	PCXI<22..22>

macro PCXS = \
	PCXI<16..19>

macro PCXO = \
	PCXI<0..15>

///////////////////////////////////////////
// Interrupt Control Register
///////////////////////////////////////////

macro CCPN = \
	ICR<0..7>

macro IE = \
	ICR<8..8>

///////////////////////////////////////////
// debug status register
///////////////////////////////////////////

macro DE = \
	DBGSR<0..0>

///////////////////////////////////////////
// software debug event register
///////////////////////////////////////////

macro EVTA = \
	SWEVT<0..2>

///////////////////////////////////////////
// Usefull macro
///////////////////////////////////////////

macro carry(result) =\
	CFLAG = result<32..32>;

macro overflow(result) =\
	if ((result > 0x7FFFFFFF) || (result < 0xFFFFFFFF80000000))\
	then\
		VFLAG=1;\
	else\
		VFLAG=0;\
	endif

macro overflow_u(result) =\
	if ((result > 0xFFFFFFFF) || (result < 0x00000000))\
	then\
		VFLAG=1;\
	else\
		VFLAG=0;\
	endif


macro stickyOverflow() =\
	if (VFLAG)\
	then\
		SVFLAG = 1;\
	else\
		SVFLAG = SVFLAG;\
	endif

macro advancedOverflow(result) =\
	if (result<31..31> ==  1) && (result<30..30> == 1)\
	then\
		AVFLAG = 1;\
	else\
		AVFLAG = 0;\
	endif

macro advancedOverflow64(result) =\
	if (result<63..63> ==  1) && (result<62..62> == 1)\
	then\
		AVFLAG = 1;\
	else\
		AVFLAG = 0;\
	endif

macro stickyAdvancedOverflow() =\
	if (AVFLAG)\
	then\
		SAVFLAG = 1;\
	else\
		SAVFLAG = SAVFLAG;\
	endif

macro sign_ext4to32(const, temp) =\
	temp<4..31> = 0x0000000;\
	temp<0..3> = const<0..3>;\
	if temp<3..3> == 1\
	then\
        	temp<4..31> = 0xFFFFFFF;\
        endif 

macro sign_ext8to32(const, temp) =\
	temp<8..31> = 0x000000;\
	temp<0..7> = const<0..7>;\
	if temp<7..7> == 1\
	then\
        	temp<8..31> = 0xFFFFFF;\
        endif 

macro sign_ext9to32(const, temp) =\
	temp<9..31> = 0x000000;\
	temp<0..8> = const<0..8>;\
	if temp<8..8> == 1\
	then\
        	temp<9..31> = 0x7FFFFF;\
        endif 

macro sign_ext16to32(const, temp) =\
	temp<16..31> = 0x0000;\
	temp<0..15> = const<0..15>;\
	if (temp<15..15> == 1)\
	then\
        	temp<16..31> = 0xFFFF;\
        endif

macro zero_ext32(const, temp, n) =\
	temp = 0x00000000;\
	temp<0..(n-1)> = const

macro ssov(x, y, res) =\
	MAX = (1 << (y-1))-1;\
	MIN = -(1 << (y-1));\
	if (x > MAX)\
	then\
		res = MAX;\
	else\
		if (x < MIN)\
		then\
			res = MIN;\
		else\
			res = x<0..31>;\
		endif;\
	endif

macro suov(x,y,res) =\
	MAX = (1 << y)-1;\
	if (x > MAX)\
	then\
		res = MAX;\
	else\
		if (x < 0)\
		then\
			res = 0;\
		else\
			res = x<0..(y-1)>;\
		endif;\
	endif

macro abso(val, temp) =\
	if (val<0)\
	then\
		temp = 0;\
		temp = temp - val;\
	else\
		temp = val;\
	endif
		 
macro storeWord(word,add) =\
	M[add] = word<0..7>;\
	M[add+1] = word<8..15>;\
	M[add+2] = word<16..23>;\
	M[add+3] = word<24..31>

macro storeHalfWord(halfWord,add) =\
	M[add] = halfWord<0..7>;\
	M[add+1] = halfWord<8..15>

macro loadWord(word,add) =\
	word<0..7> = M[add];\
	word<8..15> = M[add+1];\
	word<16..23> = M[add+2];\
	word<24..31> = M[add+3]

macro loadHalfWord(word,add) =\
	word<0..7> = M[add];\
	word<8..15> = M[add+1]

macro cdc_incr(temp) = \
	if (CDC == 0b1111111) \
	then\
		temp = 0;\
	else\
		if (	   (CDC == 0b011111)\
			|| (CDC == 0b101111)\
			|| (CDC == 0b110111)\
			|| (CDC == 0b111011)\
			|| (CDC == 0b111101)\
			|| (CDC == 0b111110) )\
		then\
			temp = 1;\
		else\
			CDC = CDC+1;\
			temp = 0;\
		endif;\
	endif

macro cdc_decr(temp) = \
	if (CDC == 0b1111111) \
	then\
		temp = 0;\
	else\
		if (	   (CDC == 0b000000)\
			|| (CDC == 0b100000)\
			|| (CDC == 0b110000)\
			|| (CDC == 0b111000)\
			|| (CDC == 0b111100)\
			|| (CDC == 0b111110) )\
		then\
			temp = 1;\
		else\
			CDC = CDC-1;\
			temp = 0;\
		endif;\
	endif
